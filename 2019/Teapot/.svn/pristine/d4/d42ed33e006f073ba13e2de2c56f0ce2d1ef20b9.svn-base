<!DOCTYPE HTML>
<html lang="ja">
<head>
<!-- Generated by javadoc -->
<title>ソース・コード</title>
<meta name="description" content="source: package: teapot, class: Example">
<meta name="generator" content="javadoc/SourceToHTMLConverter">
<link rel="stylesheet" type="text/css" href="../../stylesheet.css" title="Style">
</head>
<body class="source">
<main role="main">
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span><a id="line.1">package teapot;</a>
<span class="sourceLineNo">002</span><a id="line.2"></a>
<span class="sourceLineNo">003</span><a id="line.3">import com.jogamp.opengl.GL;</a>
<span class="sourceLineNo">004</span><a id="line.4">import com.jogamp.opengl.GL2;</a>
<span class="sourceLineNo">005</span><a id="line.5">import com.jogamp.opengl.glu.GLU;</a>
<span class="sourceLineNo">006</span><a id="line.6">import com.jogamp.opengl.util.gl2.GLUT;</a>
<span class="sourceLineNo">007</span><a id="line.7"></a>
<span class="sourceLineNo">008</span><a id="line.8">import com.jogamp.opengl.awt.GLCanvas;</a>
<span class="sourceLineNo">009</span><a id="line.9">import com.jogamp.opengl.GLAutoDrawable;</a>
<span class="sourceLineNo">010</span><a id="line.10">import com.jogamp.opengl.GLCapabilities;</a>
<span class="sourceLineNo">011</span><a id="line.11">import com.jogamp.opengl.GLEventListener;</a>
<span class="sourceLineNo">012</span><a id="line.12">import com.jogamp.opengl.GLProfile;</a>
<span class="sourceLineNo">013</span><a id="line.13"></a>
<span class="sourceLineNo">014</span><a id="line.14">import javax.swing.JFrame;</a>
<span class="sourceLineNo">015</span><a id="line.15">import java.nio.FloatBuffer;</a>
<span class="sourceLineNo">016</span><a id="line.16"></a>
<span class="sourceLineNo">017</span><a id="line.17">import java.awt.event.WindowAdapter;</a>
<span class="sourceLineNo">018</span><a id="line.18">import java.awt.event.WindowEvent;</a>
<span class="sourceLineNo">019</span><a id="line.19"></a>
<span class="sourceLineNo">020</span><a id="line.20">/**</a>
<span class="sourceLineNo">021</span><a id="line.21"> * JOGL（Java bindings for OpenGL）の例題プログラムである。&lt;br&gt;</a>
<span class="sourceLineNo">022</span><a id="line.22"> * OpenGLを使ったJavaによる三次元グラフィックスの初歩的な練習になる。&lt;br&gt;</a>
<span class="sourceLineNo">023</span><a id="line.23"> */</a>
<span class="sourceLineNo">024</span><a id="line.24">public class Example extends WindowAdapter implements GLEventListener</a>
<span class="sourceLineNo">025</span><a id="line.25">{</a>
<span class="sourceLineNo">026</span><a id="line.26">        /**</a>
<span class="sourceLineNo">027</span><a id="line.27">         * GLオブジェクトを記憶するフィールドである。&lt;br&gt;</a>
<span class="sourceLineNo">028</span><a id="line.28">         */</a>
<span class="sourceLineNo">029</span><a id="line.29">        protected GL2 gl;</a>
<span class="sourceLineNo">030</span><a id="line.30"></a>
<span class="sourceLineNo">031</span><a id="line.31">        /**</a>
<span class="sourceLineNo">032</span><a id="line.32">         * GLユーティリティを記憶するフィールドである。&lt;br&gt;</a>
<span class="sourceLineNo">033</span><a id="line.33">         */</a>
<span class="sourceLineNo">034</span><a id="line.34">        protected GLU glu;</a>
<span class="sourceLineNo">035</span><a id="line.35"></a>
<span class="sourceLineNo">036</span><a id="line.36">        /**</a>
<span class="sourceLineNo">037</span><a id="line.37">         * GLユーティリティツールキットを記憶するフィールドである。&lt;br&gt;</a>
<span class="sourceLineNo">038</span><a id="line.38">         */</a>
<span class="sourceLineNo">039</span><a id="line.39">        protected GLUT glut;</a>
<span class="sourceLineNo">040</span><a id="line.40"></a>
<span class="sourceLineNo">041</span><a id="line.41">        /**</a>
<span class="sourceLineNo">042</span><a id="line.42">         * ビューの幅を記憶するフィールドである。&lt;br&gt;</a>
<span class="sourceLineNo">043</span><a id="line.43">         */</a>
<span class="sourceLineNo">044</span><a id="line.44">        protected int width;</a>
<span class="sourceLineNo">045</span><a id="line.45"></a>
<span class="sourceLineNo">046</span><a id="line.46">        /**</a>
<span class="sourceLineNo">047</span><a id="line.47">         * ビューの高さを記憶するフィールドである。&lt;br&gt;</a>
<span class="sourceLineNo">048</span><a id="line.48">         */</a>
<span class="sourceLineNo">049</span><a id="line.49">        protected int height;</a>
<span class="sourceLineNo">050</span><a id="line.50"></a>
<span class="sourceLineNo">051</span><a id="line.51">        /**</a>
<span class="sourceLineNo">052</span><a id="line.52">         * 描画オブジェクトを記憶するフィールドである。&lt;br&gt;</a>
<span class="sourceLineNo">053</span><a id="line.53">         */</a>
<span class="sourceLineNo">054</span><a id="line.54">        protected Teapot displayObject;</a>
<span class="sourceLineNo">055</span><a id="line.55"></a>
<span class="sourceLineNo">056</span><a id="line.56">        /**</a>
<span class="sourceLineNo">057</span><a id="line.57">         * Exampleのコンストラクタである。&lt;br&gt;</a>
<span class="sourceLineNo">058</span><a id="line.58">         */</a>
<span class="sourceLineNo">059</span><a id="line.59">        public Example()</a>
<span class="sourceLineNo">060</span><a id="line.60">        {</a>
<span class="sourceLineNo">061</span><a id="line.61">                // System.out.println("Example");</a>
<span class="sourceLineNo">062</span><a id="line.62"></a>
<span class="sourceLineNo">063</span><a id="line.63">                // ティーポットのインスタンスを生成する。</a>
<span class="sourceLineNo">064</span><a id="line.64">                this.displayObject = new Teapot();</a>
<span class="sourceLineNo">065</span><a id="line.65"></a>
<span class="sourceLineNo">066</span><a id="line.66">                // OpenGL描画のためのキャンバスを生成する。</a>
<span class="sourceLineNo">067</span><a id="line.67">                GLProfile profile = GLProfile.get(GLProfile.GL2);</a>
<span class="sourceLineNo">068</span><a id="line.68">                GLCapabilities capabilities = new GLCapabilities(profile);</a>
<span class="sourceLineNo">069</span><a id="line.69">                capabilities.setDoubleBuffered(true);</a>
<span class="sourceLineNo">070</span><a id="line.70">                GLCanvas aCanvas = new GLCanvas(capabilities);</a>
<span class="sourceLineNo">071</span><a id="line.71">                aCanvas.addGLEventListener(this);</a>
<span class="sourceLineNo">072</span><a id="line.72"></a>
<span class="sourceLineNo">073</span><a id="line.73">                // フレームを生成し、上記のキャンバスを乗せて、ウィンドウとして開く。</a>
<span class="sourceLineNo">074</span><a id="line.74">                JFrame aFrame = new JFrame(this.displayObject.windowTitle());</a>
<span class="sourceLineNo">075</span><a id="line.75">                aFrame.add(aCanvas);</a>
<span class="sourceLineNo">076</span><a id="line.76">                aFrame.addNotify();</a>
<span class="sourceLineNo">077</span><a id="line.77">                int titleBarHeight = aFrame.getInsets().top;</a>
<span class="sourceLineNo">078</span><a id="line.78">                aFrame.setSize(400, 400 + titleBarHeight);</a>
<span class="sourceLineNo">079</span><a id="line.79">                aFrame.setLocationRelativeTo(null);</a>
<span class="sourceLineNo">080</span><a id="line.80">                // aFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);</a>
<span class="sourceLineNo">081</span><a id="line.81">                aFrame.addWindowListener(this);</a>
<span class="sourceLineNo">082</span><a id="line.82">                aFrame.setFocusable(false);</a>
<span class="sourceLineNo">083</span><a id="line.83">                aFrame.setVisible(true);</a>
<span class="sourceLineNo">084</span><a id="line.84"></a>
<span class="sourceLineNo">085</span><a id="line.85">                return;</a>
<span class="sourceLineNo">086</span><a id="line.86">        }</a>
<span class="sourceLineNo">087</span><a id="line.87"></a>
<span class="sourceLineNo">088</span><a id="line.88">        /**</a>
<span class="sourceLineNo">089</span><a id="line.89">         * OpenGL起動時に初期化のために呼び出される。&lt;br&gt;</a>
<span class="sourceLineNo">090</span><a id="line.90">         * @param aDrawable OpenGLの描画ダーゲット</a>
<span class="sourceLineNo">091</span><a id="line.91">         */</a>
<span class="sourceLineNo">092</span><a id="line.92">        public void init(GLAutoDrawable aDrawable)</a>
<span class="sourceLineNo">093</span><a id="line.93">        {</a>
<span class="sourceLineNo">094</span><a id="line.94">                // System.out.println("init");</a>
<span class="sourceLineNo">095</span><a id="line.95"></a>
<span class="sourceLineNo">096</span><a id="line.96">                // グラフィックライブラリ（gl）を獲得し、</a>
<span class="sourceLineNo">097</span><a id="line.97">                // グラフィックライブラリユーティリティ（glu）と</a>
<span class="sourceLineNo">098</span><a id="line.98">                // グラフィックライブラリユーティリティツールキット（glut）を生成する。</a>
<span class="sourceLineNo">099</span><a id="line.99">                this.gl = aDrawable.getGL().getGL2();</a>
<span class="sourceLineNo">100</span><a id="line.100">                this.glu = new GLU();</a>
<span class="sourceLineNo">101</span><a id="line.101">                this.glut = new GLUT();</a>
<span class="sourceLineNo">102</span><a id="line.102"></a>
<span class="sourceLineNo">103</span><a id="line.103">                // 材質の有効化</a>
<span class="sourceLineNo">104</span><a id="line.104">                // 陰線隠面処理の有効化</a>
<span class="sourceLineNo">105</span><a id="line.105">                // 片面表示機能の無効化</a>
<span class="sourceLineNo">106</span><a id="line.106">                // 法線ベクトルの有効化</a>
<span class="sourceLineNo">107</span><a id="line.107">                this.gl.glEnable(GL2.GL_COLOR_MATERIAL);</a>
<span class="sourceLineNo">108</span><a id="line.108">                this.gl.glEnable(GL2.GL_DEPTH_TEST);</a>
<span class="sourceLineNo">109</span><a id="line.109">                this.gl.glDisable(GL2.GL_CULL_FACE);</a>
<span class="sourceLineNo">110</span><a id="line.110">                this.gl.glEnable(GL2.GL_NORMALIZE);</a>
<span class="sourceLineNo">111</span><a id="line.111"></a>
<span class="sourceLineNo">112</span><a id="line.112">                return;</a>
<span class="sourceLineNo">113</span><a id="line.113">        }</a>
<span class="sourceLineNo">114</span><a id="line.114"></a>
<span class="sourceLineNo">115</span><a id="line.115">        /**</a>
<span class="sourceLineNo">116</span><a id="line.116">         * OpenGL描画を行う際に呼び出される。&lt;br&gt;</a>
<span class="sourceLineNo">117</span><a id="line.117">         * @param aDrawable OpenGLの描画ダーゲット</a>
<span class="sourceLineNo">118</span><a id="line.118">         */</a>
<span class="sourceLineNo">119</span><a id="line.119">        public void display(GLAutoDrawable aDrawable)</a>
<span class="sourceLineNo">120</span><a id="line.120">        {</a>
<span class="sourceLineNo">121</span><a id="line.121">                // System.out.println("display");</a>
<span class="sourceLineNo">122</span><a id="line.122"></a>
<span class="sourceLineNo">123</span><a id="line.123">                // 視界（視点・注視点・上方向ベクトル・視界角・近・遠）をティーポットから取得して整（設）える。</a>
<span class="sourceLineNo">124</span><a id="line.124">                double[] eyePoint = this.displayObject.eyePoint();</a>
<span class="sourceLineNo">125</span><a id="line.125">                double[] sightPoint = this.displayObject.sightPoint();</a>
<span class="sourceLineNo">126</span><a id="line.126">                double[] upVector = this.displayObject.upVector();</a>
<span class="sourceLineNo">127</span><a id="line.127">                double fovy = this.displayObject.fovy();</a>
<span class="sourceLineNo">128</span><a id="line.128">                double near = this.displayObject.near();</a>
<span class="sourceLineNo">129</span><a id="line.129">                double far = this.displayObject.far();</a>
<span class="sourceLineNo">130</span><a id="line.130"></a>
<span class="sourceLineNo">131</span><a id="line.131">                // キャンバス（ウィンドウ）の大きさからアスペクト比を求める。</a>
<span class="sourceLineNo">132</span><a id="line.132">                double aspect = (double)width / (double)height;</a>
<span class="sourceLineNo">133</span><a id="line.133"></a>
<span class="sourceLineNo">134</span><a id="line.134">                // プロジェクション（遠近法）を設定する。</a>
<span class="sourceLineNo">135</span><a id="line.135">                this.gl.glMatrixMode(GL2.GL_PROJECTION);</a>
<span class="sourceLineNo">136</span><a id="line.136">                this.gl.glLoadIdentity();</a>
<span class="sourceLineNo">137</span><a id="line.137">                this.glu.gluPerspective(fovy, aspect, near, far);</a>
<span class="sourceLineNo">138</span><a id="line.138"></a>
<span class="sourceLineNo">139</span><a id="line.139">                // 視界を設定する。</a>
<span class="sourceLineNo">140</span><a id="line.140">                this.gl.glMatrixMode(GL2.GL_MODELVIEW);</a>
<span class="sourceLineNo">141</span><a id="line.141">                this.gl.glLoadIdentity();</a>
<span class="sourceLineNo">142</span><a id="line.142">                this.glu.gluLookAt(</a>
<span class="sourceLineNo">143</span><a id="line.143">                                                   eyePoint[0], eyePoint[1], eyePoint[2],</a>
<span class="sourceLineNo">144</span><a id="line.144">                                                   sightPoint[0], sightPoint[1], sightPoint[2],</a>
<span class="sourceLineNo">145</span><a id="line.145">                                                   upVector[0], upVector[1], upVector[2]);</a>
<span class="sourceLineNo">146</span><a id="line.146"></a>
<span class="sourceLineNo">147</span><a id="line.147">                // キャンバスをクリアする。</a>
<span class="sourceLineNo">148</span><a id="line.148">                this.gl.glClearColor(1.0f, 1.0f, 1.0f, 1.0f);</a>
<span class="sourceLineNo">149</span><a id="line.149">                this.gl.glClear(GL2.GL_COLOR_BUFFER_BIT | GL2.GL_DEPTH_BUFFER_BIT);</a>
<span class="sourceLineNo">150</span><a id="line.150"></a>
<span class="sourceLineNo">151</span><a id="line.151">                // 照明を設定する。</a>
<span class="sourceLineNo">152</span><a id="line.152">                this.gl.glEnable(GL2.GL_LIGHTING);</a>
<span class="sourceLineNo">153</span><a id="line.153">                this.gl.glLightModelfv(GL2.GL_LIGHT_MODEL_AMBIENT, this.asFloatBuffer(new float[] { 0.5f, 0.5f, 0.5f, 1.0f }));</a>
<span class="sourceLineNo">154</span><a id="line.154">                this.gl.glLightModelf(GL2.GL_LIGHT_MODEL_LOCAL_VIEWER, 0.0f);</a>
<span class="sourceLineNo">155</span><a id="line.155">                this.gl.glLightModelf(GL2.GL_LIGHT_MODEL_TWO_SIDE, 1.0f);</a>
<span class="sourceLineNo">156</span><a id="line.156">                this.gl.glEnable(GL2.GL_LIGHT0);</a>
<span class="sourceLineNo">157</span><a id="line.157">                this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_POSITION, this.asFloatBuffer(new float[] { 0.0f, 0.0f, 1.0f, 0.0f }));</a>
<span class="sourceLineNo">158</span><a id="line.158">                this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_SPOT_DIRECTION, this.asFloatBuffer(new float[] { 0.0f, 0.0f, -1.0f }));</a>
<span class="sourceLineNo">159</span><a id="line.159">                this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_SPOT_CUTOFF, this.asFloatBuffer(new float[] { 90.0f }));</a>
<span class="sourceLineNo">160</span><a id="line.160">                this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_DIFFUSE, this.asFloatBuffer(new float[] { 0.5f, 0.5f, 0.5f, 1.0f }));</a>
<span class="sourceLineNo">161</span><a id="line.161">                this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_SPECULAR, this.asFloatBuffer(new float[] { 0.5f, 0.5f, 0.5f, 1.0f }));</a>
<span class="sourceLineNo">162</span><a id="line.162">                this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_LINEAR_ATTENUATION, this.asFloatBuffer(new float[] { 0.0f }));</a>
<span class="sourceLineNo">163</span><a id="line.163">                this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_QUADRATIC_ATTENUATION, this.asFloatBuffer(new float[] { 0.0f }));</a>
<span class="sourceLineNo">164</span><a id="line.164">                this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_CONSTANT_ATTENUATION, this.asFloatBuffer(new float[] { 1.0f }));</a>
<span class="sourceLineNo">165</span><a id="line.165"></a>
<span class="sourceLineNo">166</span><a id="line.166">                // ティーポットをレンダリング（描画）する。</a>
<span class="sourceLineNo">167</span><a id="line.167">                this.displayObject.rendering(this.gl, this.glu, this.glut);</a>
<span class="sourceLineNo">168</span><a id="line.168"></a>
<span class="sourceLineNo">169</span><a id="line.169">                return;</a>
<span class="sourceLineNo">170</span><a id="line.170">        }</a>
<span class="sourceLineNo">171</span><a id="line.171"></a>
<span class="sourceLineNo">172</span><a id="line.172">        /**</a>
<span class="sourceLineNo">173</span><a id="line.173">         * OpenGL表示モードや表示デバイスが変更された際に呼び出される。&lt;br&gt;</a>
<span class="sourceLineNo">174</span><a id="line.174">         * @param aDrawable OpenGLの描画ダーゲット</a>
<span class="sourceLineNo">175</span><a id="line.175">         * @param modeChanged 表示モードが変更されたか否か</a>
<span class="sourceLineNo">176</span><a id="line.176">         * @param deviceChanged 表示デバイスが変更されたか否か</a>
<span class="sourceLineNo">177</span><a id="line.177">         */</a>
<span class="sourceLineNo">178</span><a id="line.178">        public void displayChanged(GLAutoDrawable aDrawable, boolean modeChanged, boolean deviceChanged)</a>
<span class="sourceLineNo">179</span><a id="line.179">        {</a>
<span class="sourceLineNo">180</span><a id="line.180">                // System.out.println("displayChanged");</a>
<span class="sourceLineNo">181</span><a id="line.181"></a>
<span class="sourceLineNo">182</span><a id="line.182">                return;</a>
<span class="sourceLineNo">183</span><a id="line.183">        }</a>
<span class="sourceLineNo">184</span><a id="line.184"></a>
<span class="sourceLineNo">185</span><a id="line.185">        /**</a>
<span class="sourceLineNo">186</span><a id="line.186">         * OpenGLの資源が破棄された際に呼び出される。&lt;br&gt;</a>
<span class="sourceLineNo">187</span><a id="line.187">         * @param aDrawable OpenGLの描画ダーゲット</a>
<span class="sourceLineNo">188</span><a id="line.188">         */</a>
<span class="sourceLineNo">189</span><a id="line.189">        public void dispose(GLAutoDrawable aDrawable)</a>
<span class="sourceLineNo">190</span><a id="line.190">        {</a>
<span class="sourceLineNo">191</span><a id="line.191">                // System.out.println("dispose");</a>
<span class="sourceLineNo">192</span><a id="line.192"></a>
<span class="sourceLineNo">193</span><a id="line.193">                return;</a>
<span class="sourceLineNo">194</span><a id="line.194">        }</a>
<span class="sourceLineNo">195</span><a id="line.195"></a>
<span class="sourceLineNo">196</span><a id="line.196">        /**</a>
<span class="sourceLineNo">197</span><a id="line.197">         * OpenGL表示領域が変更された際に呼び出される。&lt;br&gt;</a>
<span class="sourceLineNo">198</span><a id="line.198">         * @param aDrawable OpenGLの描画ダーゲット</a>
<span class="sourceLineNo">199</span><a id="line.199">         * @param x 表示領域のX座標</a>
<span class="sourceLineNo">200</span><a id="line.200">         * @param y 表示領域のY座標</a>
<span class="sourceLineNo">201</span><a id="line.201">         * @param w 表示領域の幅</a>
<span class="sourceLineNo">202</span><a id="line.202">         * @param h 表示領域の高さ</a>
<span class="sourceLineNo">203</span><a id="line.203">         */</a>
<span class="sourceLineNo">204</span><a id="line.204">        public void reshape(GLAutoDrawable aDrawable, int x, int y, int w, int h)</a>
<span class="sourceLineNo">205</span><a id="line.205">        {</a>
<span class="sourceLineNo">206</span><a id="line.206">                // System.out.println("reshape");</a>
<span class="sourceLineNo">207</span><a id="line.207"></a>
<span class="sourceLineNo">208</span><a id="line.208">                this.width = w;</a>
<span class="sourceLineNo">209</span><a id="line.209">                this.height = h;</a>
<span class="sourceLineNo">210</span><a id="line.210"></a>
<span class="sourceLineNo">211</span><a id="line.211">                this.gl.glViewport(0, 0, width, height);</a>
<span class="sourceLineNo">212</span><a id="line.212"></a>
<span class="sourceLineNo">213</span><a id="line.213">                return;</a>
<span class="sourceLineNo">214</span><a id="line.214">        }</a>
<span class="sourceLineNo">215</span><a id="line.215"></a>
<span class="sourceLineNo">216</span><a id="line.216">        /**</a>
<span class="sourceLineNo">217</span><a id="line.217">         * float配列をfloatバッファに変換する。&lt;br&gt;</a>
<span class="sourceLineNo">218</span><a id="line.218">         * @param array float配列</a>
<span class="sourceLineNo">219</span><a id="line.219">         * @return floatバッファ</a>
<span class="sourceLineNo">220</span><a id="line.220">         */</a>
<span class="sourceLineNo">221</span><a id="line.221">        private FloatBuffer asFloatBuffer(float[] array)</a>
<span class="sourceLineNo">222</span><a id="line.222">        {</a>
<span class="sourceLineNo">223</span><a id="line.223">                FloatBuffer buffer = FloatBuffer.allocate(array.length);</a>
<span class="sourceLineNo">224</span><a id="line.224">                for (int i = 0; i &lt; array.length; i++)</a>
<span class="sourceLineNo">225</span><a id="line.225">                {</a>
<span class="sourceLineNo">226</span><a id="line.226">                        buffer.put(array[i]);</a>
<span class="sourceLineNo">227</span><a id="line.227">                }</a>
<span class="sourceLineNo">228</span><a id="line.228">                buffer.rewind();</a>
<span class="sourceLineNo">229</span><a id="line.229"></a>
<span class="sourceLineNo">230</span><a id="line.230">                return buffer;</a>
<span class="sourceLineNo">231</span><a id="line.231">        }</a>
<span class="sourceLineNo">232</span><a id="line.232"></a>
<span class="sourceLineNo">233</span><a id="line.233">        /**</a>
<span class="sourceLineNo">234</span><a id="line.234">         * ウィンドウを閉じようとした時に呼び出される。&lt;br&gt;</a>
<span class="sourceLineNo">235</span><a id="line.235">         * @param aWindowEvent ウィンドウイベント</a>
<span class="sourceLineNo">236</span><a id="line.236">         */</a>
<span class="sourceLineNo">237</span><a id="line.237">        public void windowClosing(WindowEvent aWindowEvent)</a>
<span class="sourceLineNo">238</span><a id="line.238">        {</a>
<span class="sourceLineNo">239</span><a id="line.239">                // System.out.println(aWindowEvent.paramString());</a>
<span class="sourceLineNo">240</span><a id="line.240"></a>
<span class="sourceLineNo">241</span><a id="line.241">                // 終了する。</a>
<span class="sourceLineNo">242</span><a id="line.242">                System.exit(0);</a>
<span class="sourceLineNo">243</span><a id="line.243"></a>
<span class="sourceLineNo">244</span><a id="line.244">                return;</a>
<span class="sourceLineNo">245</span><a id="line.245">        }</a>
<span class="sourceLineNo">246</span><a id="line.246"></a>
<span class="sourceLineNo">247</span><a id="line.247">        /**</a>
<span class="sourceLineNo">248</span><a id="line.248">         * ティーポットを描くOpenGLのウィンドウを開く。&lt;br&gt;</a>
<span class="sourceLineNo">249</span><a id="line.249">         * @param arguments コマンドの引数列（文字列の配列）&lt;br&gt;</a>
<span class="sourceLineNo">250</span><a id="line.250">         */</a>
<span class="sourceLineNo">251</span><a id="line.251">        public static void main(String[] arguments)</a>
<span class="sourceLineNo">252</span><a id="line.252">        {</a>
<span class="sourceLineNo">253</span><a id="line.253">                // System.out.println("main");</a>
<span class="sourceLineNo">254</span><a id="line.254"></a>
<span class="sourceLineNo">255</span><a id="line.255">                new Example();</a>
<span class="sourceLineNo">256</span><a id="line.256"></a>
<span class="sourceLineNo">257</span><a id="line.257">                return;</a>
<span class="sourceLineNo">258</span><a id="line.258">        }</a>
<span class="sourceLineNo">259</span><a id="line.259">}</a>




























































</pre>
</div>
</main>
</body>
</html>
