<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta name="keywords" content="Aoki,Atsushi,Smalltalk,Smalltalker,Program,Programmer,Object,Oriented,Programming">
<meta name="description" content="青木淳（あおきあつし）のホームページ">
<meta name="author" content="AOKI Atsushi">
<link rev="made" href="mailto:atsushi@cc.kyoto-su.ac.jp">
<link rel="index" href="index-j.html">
<link rel="shortcut icon" href="http://www.cc.kyoto-su.ac.jp/~atsushi/icons/aoki.ico">
<style type="text/css">
<!--
body {
  background-color : #ffffff;
  margin : 20px;
  padding : 10px;
  font-family : serif;
  font-size : 10pt;
}
a {
  text-decoration : underline;
  color : #000000;
}
a:link {
  background-color : #ffddbb;
}
a:visited {
  background-color : #ccffcc;
}
a:hover {
  background-color : #dddddd;
}
a:active {
  background-color : #dddddd;
}
div.belt {
  background-color : #eeeeee;
  padding : 0px 4px;
}
div.belt-yellow {
  background-color : #ffffcc;
  padding : 0px 4px;
}
div.belt-blue {
  background-color : #ddeeff;
  padding : 0px 4px;
}
div.belt-pink {
  background-color : #ffeedd;
  padding : 0px 4px;
}
div.right-small {
  text-align : right;
  font-size : 8pt;
}
img.border {
  border-width : 1px;
  border-color : #000000;
  vertical-align : middle;
}
img.borderless {
  border-width : 0px;
  vertical-align : middle;
}
p.belt {
  background-color : #ffeedd;
  padding : 4px 8px;
}
p.belt-blue {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt-yellow {
  background-color : #ffffcc;
  padding : 4px 8px;
}
table {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
}
table.profile {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
  margin-top : 8px;
  margin-left : 8px;
  margin-right : 8px;
  margin-bottom : 8px;
}
table.belt {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  background-color : #ffeedd;
  padding : 0px 0px;
  width : 100%;
}
table.content {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
}
table.font-fixed {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
  font-family : monospace;
}
table.nest {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 0px 0px;
}
td {
  padding : 0px 0px;
  vertical-align : middle;
}
td.center {
  text-align : center;
}
td.center-half {
  text-align : center;
  width : 50%;
  font-size : 8pt;
}
td.center-small {
  text-align : center;
  font-size : 8pt;
  padding : 0px 4px;
}
td.center-small-nopadding {
  text-align : center;
  font-size : 8pt;
  padding : 0px 0px;
}
td.center-white {
  text-align : center;
  background-color : #ffffff;
}
td.center-small-white {
  text-align : center;
  font-size : 8pt;
  background-color : #ffffff;
}
td.center-border1 {
  text-align : center;
  vertical-align : middle;
  empty-cells : show;
  border-style : solid;
  border-width : 1px;
  border-color : #ffc080;
  width : 22px;
  height : 22px;
}
td.left-small {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
}
td.left-small-white {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
td.right-small {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
}
td.right-small-white {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
th {
  padding : 0px 0px;
  vertical-align : middle;
}
#menu {
  margin: 0px 0px 0px 0px;
  padding: 0px;
  height: 32px;
}
#menu ul {
  margin: 0px;
  padding: 0px;
  list-style: none;
  text-align: center;
  clear: both;
}
#menu li {
  margin: 0px 5px 0px 0px;
  padding: 0px;
  float: left;
}
#menu a {
  display: block;
  padding: 2px 4px;
  text-decoration: none;
  margin: 0px;
  font-weight: bold;
  background: #FFFFFF;
  color: #333333;
  border: 1px solid #666666;
}
#menu a:hover {
  display: block;
  padding: 2px 4px;
  border-bottom: 1px solid #000000;
  text-decoration: none;
  background: #FFCC66;
}
#menu .current {
  background-color: #F45F57;
  font-weight: bold;
  color: #FFFFFF;
  border: 1px solid #333333;
}
-->
</style>
<!-- SyntaxHighlighter BEGIN -->
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shCore.css" rel="stylesheet" type="text/css">
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shThemeEclipse.css" rel="stylesheet" type="text/css">
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shCore.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushJava.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPlain.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPython.js" type="text/javascript"></script>
<script type="text/javascript"> 
<!--
SyntaxHighlighter.config.bloggerMode = true;
SyntaxHighlighter.config.clipboardSwf = 'http://alexgorbatchev.com/pub/sh/current/scripts/clipboard.swf';
SyntaxHighlighter.all();
SyntaxHighlighter.defaults['auto-links'] = false;
-->
</script>
<!-- SyntaxHighlighter END -->
<title>Version 1：三角形1つをXYZ軸と共に描き出す</title>
</head>
<body>
<div id="menu">
<ul>
  <li><a href="../Lectures/index-j.html#DragonProgrammingProcess">Javaプログラム集</a></li>
  <li><a href="index-j.html">ドラゴンのプログラミング過程とリファクタリング過程</a></li>
  <li><a href="version0.html">0</a></li>
  <li><a href="version1.html" class="current">1</a></li>
  <li><a href="version2.html">2</a></li>
  <li><a href="version3.html">3</a></li>
  <li><a href="version4.html">4</a></li>
  <li><a href="version5.html">5</a></li>
  <li><a href="version6.html">6</a></li>
  <li><a href="version7.html">7</a></li>
  <li><a href="version8.html">8</a></li>
  <li><a href="version9.html">9</a></li>
</ul>
</div>
<hr>
<!--********************************************************************************************************************-->
<h2>Version 1：三角形1つをXYZ軸と共に描き出す</h2>
<p>ドラゴンは多数の三角形の集合体（三角形がたくさん集まったもの）です。どうぞ<a href="http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/Dragon/dragon.pdf">ヒント</a>をご覧くださいませ。ということは、<a href="#RoyalBlueTriangle">1個の三角形さえ</a>、きちんとレンダリングできれば、ドラゴンもレンダリングできるということになりますでしょ。最初のバージョンとして「<a href="#RoyalBlueTriangle">三角形1つだけをXYZ軸と共に描き出す</a>」
こと、それを目標に定めてプログラミングします。以下の差分（変更箇所：編集部分）やクラス階層（インヘリタンス）を参考にしながら、それに続くソースコード（Version 1）と同じになるように、プログラムを編集・加筆してください。</p>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="Differences">差分</a>（変更箇所：編集部分）</h3>
</div>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-pink">
【前バージョンからの差分＝変更箇所】
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0,0)]))' -->
<pre class="brush: plain; toolbar: false; first-line: 1; highlight: [];">
【ファイルやディレクトリの増減】
========================================
Compare:
./Version0
     1: dragon/Dragon.java
     2: dragon/Example.java
with:
./Version1
     1: dragon/Dragon.java
     2: dragon/Example.java
========================================
Added (or Removed) files:
========================================
【それぞれのファイルの変更】
----------------------------------------
Compare:
./Version0/dragon/Dragon.java
with:
./Version1/dragon/Dragon.java
----------------------------------------
Result:
8a9
&gt; import java.util.List;
32c33,53
&lt;         System.out.println("Dragon");
---
&gt;         // System.out.println("Dragon");
&gt; 
&gt;         String urlString = "http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/Dragon/dragon.txt";
&gt;         List&lt;String&gt; aCollection = StringUtility.readTextFromURL(urlString);
&gt;         int numberOfVertexes = 0;
&gt;         int numberOfTriangles = 0;
&gt;         Iterator&lt;String&gt; anIterator = aCollection.iterator();
&gt;         while (anIterator.hasNext())
&gt;         {
&gt;             String aString = anIterator.next();
&gt;             List&lt;String&gt; aList = StringUtility.splitString(aString, " \t\n\r");
&gt;             if (aList.size() == 0) { continue; }
&gt;             System.out.println(aList);
&gt;             this.triangles = new double[1][3][3];
&gt;             double[] vertex1 = new double[] { 1.0d, 0.0d, 0.0d };
&gt;             double[] vertex2 = new double[] { 0.0d, 1.0d, 0.0d };
&gt;             double[] vertex3 = new double[] { 0.0d, 0.0d, 1.0d };
&gt;             this.triangles[0][0] = vertex1;
&gt;             this.triangles[0][1] = vertex2;
&gt;             this.triangles[0][2] = vertex3;
&gt;         }
119a141,182
&gt;         // ドラゴンを描画する。
&gt;         gl.glColor3d(0.5d, 0.5d, 1.0d);
&gt; 
&gt;         int numberOfTriangles = this.triangles.length;
&gt;         for (int n = 0; n &lt; numberOfTriangles; n++)
&gt;         {
&gt;             // 三角形の三つの頂点を取得
&gt;             double[] vertex1 = this.triangles[n][0];
&gt;             double[] vertex2 = this.triangles[n][1];
&gt;             double[] vertex3 = this.triangles[n][2];
&gt;             // System.out.printf("%d: (%g, %g, %g) , (%g, %g, %g) , (%g, %g, %g)\n",
&gt;             //                   n,
&gt;             //                   vertex1[0], vertex1[1], vertex1[2],
&gt;             //                   vertex2[0], vertex2[1], vertex2[2],
&gt;             //                   vertex3[0], vertex3[1], vertex3[2]);
&gt; 
&gt;             // 照光に必要な法線ベクトルの計算
&gt;             double[] normalUnitVector = new double[3];
&gt;             double ux = vertex2[0] - vertex1[0];
&gt;             double uy = vertex2[1] - vertex1[1];
&gt;             double uz = vertex2[2] - vertex1[2];
&gt;             double vx = vertex3[0] - vertex1[0];
&gt;             double vy = vertex3[1] - vertex1[1];
&gt;             double vz = vertex3[2] - vertex1[2];
&gt;             double x = (uy * vz) - (uz * vy);
&gt;             double y = (uz * vx) - (ux * vz);
&gt;             double z = (ux * vy) - (uy * vx);
&gt;             double distance = Math.sqrt((x * x) + (y * y) + (z * z));
&gt;             normalUnitVector[0] = x / distance;
&gt;             normalUnitVector[1] = y / distance;
&gt;             normalUnitVector[2] = z / distance;
&gt;             // System.out.printf("%d: [%g, %g, %g]\n", n, normalUnitVector[0], normalUnitVector[1], normalUnitVector[2]);
&gt; 
&gt;             // 法線ベクトルと三角形の三つの頂点を与えて描画
&gt;             gl.glBegin(GL2.GL_TRIANGLES);
&gt;             gl.glNormal3dv(this.asDoubleBuffer(normalUnitVector));
&gt;             gl.glVertex3dv(this.asDoubleBuffer(vertex1));
&gt;             gl.glVertex3dv(this.asDoubleBuffer(vertex2));
&gt;             gl.glVertex3dv(this.asDoubleBuffer(vertex3));
&gt;             gl.glEnd();
&gt;         }
&gt; 
----------------------------------------
Compare:
./Version0/dragon/Example.java
with:
./Version1/dragon/Example.java
----------------------------------------
Result:
----------------------------------------
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="Inheritance">クラス階層</a>（インヘリタンス）</h3>
</div>
<!--********************************************************************************************************************-->
<ul style="list-style-type:circle;">
  <li>java.awt.event.WindowAdapter
    <ul style="list-style-type:circle;">
      <li>dragon.<a href="#dragon_Example" title="dragon_Example">Example</a> (implements javax.media.opengl.GLEventListener)</li>
    </ul>
  </li>
  <li>java.lang.Object
    <ul style="list-style-type:circle;">
      <li>dragon.<a href="#dragon_Dragon" title="dragon_Dragon">Dragon</a></li>
    </ul>
</ul>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="SourceCode">ソースコード</a>（Version 1）</h3>
</div>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-blue">
<h4><a name="dragon_Dragon">dragon.Dragon</a></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0,0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
package dragon;

import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.util.gl2.GLUT;

import java.util.Iterator;
import java.util.List;

import java.nio.DoubleBuffer;

import utility.StringUtility;

/**
 * ドラゴンをレンダリング（描画）する。
 * XYZ軸に加えてドラゴンを描画する。
 * 視界（視点・注視点・上方向ベクトル・視界角・近・遠）もドラゴンが応答する。
 */
public class Dragon extends Object
{
    /**
     * 三角形群を記憶するフィールドである。
     */
    protected double[][][] triangles; // [numberOfTriangles][numberOfVertexes][numberOfDoubles]の三次元配列

    /**
     * ドラゴンのコンストラクタである。
     * &lt;a href="http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/Dragon/dragon.txt"&gt;dragon.txt&lt;/a&gt;からデータを読み取って三角形群を生成する。
     */
    public Dragon()
    {
        // System.out.println("Dragon");

        String urlString = "http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/Dragon/dragon.txt";
        List&lt;String&gt; aCollection = StringUtility.readTextFromURL(urlString);
        int numberOfVertexes = 0;
        int numberOfTriangles = 0;
        Iterator&lt;String&gt; anIterator = aCollection.iterator();
        while (anIterator.hasNext())
        {
            String aString = anIterator.next();
            List&lt;String&gt; aList = StringUtility.splitString(aString, " \t\n\r");
            if (aList.size() == 0) { continue; }
            System.out.println(aList);
            this.triangles = new double[1][3][3];
            double[] vertex1 = new double[] { 1.0d, 0.0d, 0.0d };
            double[] vertex2 = new double[] { 0.0d, 1.0d, 0.0d };
            double[] vertex3 = new double[] { 0.0d, 0.0d, 1.0d };
            this.triangles[0][0] = vertex1;
            this.triangles[0][1] = vertex2;
            this.triangles[0][2] = vertex3;
        }

        return;
    }

    /**
     * 視点を応答する。
     * @return 視点座標（x,y,zの配列）
     */
    public double[] eyePoint()
    {
        return new double[] { -5.5852450791872d, 3.07847342734d, 15.794105252496d };
    }

    /**
     * 注視点を応答する。
     * @return 注視点座標（x,y,zの配列）
     */
    public double[] sightPoint()
    {
        return new double[] { 0.27455347776413d, 0.20096999406815d, -0.11261999607086d };
    }

    /**
     * 上方向ベクトルを応答する。
     * @return 上方向ベクトル（x,y,zの配列）
     */
    public double[] upVector()
    {
        return new double[] { 0.1018574904194d, 0.98480906061847d, -0.14062775604137d };
    }

    /**
     * 視野角を応答する。
     * @return 視野角
     */
    public double fovy()
    {
        return 12.642721790235d;
    }

    /**
     * 近を応答する。
     * @return 近
     */
    public double near()
    {
        return 0.01d;
    }

    /**
     * 遠を応答する。
     * @return 遠
     */
    public double far()
    {
        return 100.0d;
    }

    /**
     * レンダリング（描画）する。
     * @param gl グラフィックライブラリ
     * @param glu グラフィックライブラリユーテリティ
     * @param glut グラフィックライブラリユーテリティツールキット
     */
    public void rendering(GL2 gl, GLU glu, GLUT glut)
    {
        double scale = 1.0d;

        gl.glBegin(GL2.GL_LINES);

        // X軸（赤）を描画する。
        gl.glColor4d(1.0d, 0.0d, 0.0d, 1.0d);
        gl.glVertex3d(-1.000d * scale, 0.0d, 0.0d);
        gl.glVertex3d( 1.618d * scale, 0.0d, 0.0d);

        // Y軸（緑）を描画する。
        gl.glColor4d(0.0d, 1.0d, 0.0d, 1.0d);
        gl.glVertex3d(0.0d, -1.000d * scale, 0.0d);
        gl.glVertex3d(0.0d,  1.618d * scale, 0.0d);

        // Z軸（青）を描画する。
        gl.glColor4d(0.0d, 0.0d, 1.0d, 1.0d);
        gl.glVertex3d(0.0d, 0.0d, -1.000d * scale);
        gl.glVertex3d(0.0d, 0.0d,  1.618d * scale);

        gl.glEnd();

        // ドラゴンを描画する。
        gl.glColor3d(0.5d, 0.5d, 1.0d);

        int numberOfTriangles = this.triangles.length;
        for (int n = 0; n &lt; numberOfTriangles; n++)
        {
            // 三角形の三つの頂点を取得
            double[] vertex1 = this.triangles[n][0];
            double[] vertex2 = this.triangles[n][1];
            double[] vertex3 = this.triangles[n][2];
            // System.out.printf("%d: (%g, %g, %g) , (%g, %g, %g) , (%g, %g, %g)\n",
            //                   n,
            //                   vertex1[0], vertex1[1], vertex1[2],
            //                   vertex2[0], vertex2[1], vertex2[2],
            //                   vertex3[0], vertex3[1], vertex3[2]);

            // 照光に必要な法線ベクトルの計算
            double[] normalUnitVector = new double[3];
            double ux = vertex2[0] - vertex1[0];
            double uy = vertex2[1] - vertex1[1];
            double uz = vertex2[2] - vertex1[2];
            double vx = vertex3[0] - vertex1[0];
            double vy = vertex3[1] - vertex1[1];
            double vz = vertex3[2] - vertex1[2];
            double x = (uy * vz) - (uz * vy);
            double y = (uz * vx) - (ux * vz);
            double z = (ux * vy) - (uy * vx);
            double distance = Math.sqrt((x * x) + (y * y) + (z * z));
            normalUnitVector[0] = x / distance;
            normalUnitVector[1] = y / distance;
            normalUnitVector[2] = z / distance;
            // System.out.printf("%d: [%g, %g, %g]\n", n, normalUnitVector[0], normalUnitVector[1], normalUnitVector[2]);

            // 法線ベクトルと三角形の三つの頂点を与えて描画
            gl.glBegin(GL2.GL_TRIANGLES);
            gl.glNormal3dv(this.asDoubleBuffer(normalUnitVector));
            gl.glVertex3dv(this.asDoubleBuffer(vertex1));
            gl.glVertex3dv(this.asDoubleBuffer(vertex2));
            gl.glVertex3dv(this.asDoubleBuffer(vertex3));
            gl.glEnd();
        }

        gl.glFlush();

        return;
    }

    /**
     * double配列をDoubleバッファに変換する。
     * @param array double配列
     * @return doubleバッファ
     */
    public DoubleBuffer asDoubleBuffer(double[] array)
    {
        DoubleBuffer buffer = DoubleBuffer.allocate(array.length);
        for (int i = 0; i &lt; array.length; i++)
        {
            buffer.put(array[i]);
        }
        buffer.rewind();

        return buffer;
    }

    /**
     * ウィンドウのタイトル（ラベル）を応答する。
     * @return タイトル文字列
     */
    public String windowTitle()
    {
        return "Dragon";
    }
}
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-blue">
<h4><a name="dragon_Example">dragon.Example</a><span style="font-size: x-small;">（<a href="version0.html#dragon_Example_Base"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0,0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="BuildAndResult">ビルド＆実行結果</a>（Version 1）</h3>
</div>
<p>では、実行してみましょう。標準出力にドラゴンデータが1行ずつ字句解析されて（トークン列になって）書き出され、1枚のウィンドウが開き、その中に三角形が1つXYZ軸と共に描き出されます。</p>
<blockquote>
<pre>
$ <span style="color:#ff0000">make test</span>
env LC_ALL=ja_JP.UTF-8 ant test
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Buildfile: /Users/aoki/Developments/Languages/Java/Dragon/Version1/build.xml

prepare:
     [exec] 2019年 12月27日 金曜日 10時14分03秒 JST

compile:
    [javac] Compiling 2 source files to /Users/aoki/Developments/Languages/Java/Dragon/Version1/Classes
    [javac] Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
     [exec] 2019年 12月27日 金曜日 10時14分04秒 JST

jar:
      [jar] Building jar: /Users/aoki/Developments/Languages/Java/Dragon/Version1/dragon.jar
      [jar] Building jar: /Users/aoki/Developments/Languages/Java/Dragon/Version1/dragon-natives-macosx-universal.jar
     [exec] 2019年 12月27日 金曜日 10時14分05秒 JST

all:
     [exec] 2019年 12月27日 金曜日 10時14分05秒 JST

test:
     [exec] Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
     [exec] [body_name, dragon]
     [exec] [number_of_vertexes, 1166]
     [exec] [number_of_triangles, 2328]
     [exec] [vertex_record, x(float), y(float), z(float)]
     [exec] [triangle_record, index_of_first_vertex(integer), index_of_second_vertex(integer), index_of_third_vertex(integer)]
     [exec] [end_header]
     [exec] [-0.220924, 0.474198, 1.13044]
     [exec] [0.698583, -1.12726, 0.267738]
     [exec] [-0.169883, -0.530471, -1.34753]
          …
     [exec] [0.461926, -0.890087, 0.136854]
     [exec] [0.516414, -0.783548, 0.067789]
     [exec] [0.190704, -0.610635, -0.9489]
     [exec] [511, 880, 429]
     [exec] [333, 261, 880]
     [exec] [261, 429, 880]
          …
     [exec] [621, 726, 150]
     [exec] [747, 438, 155]
     [exec] [438, 747, 150]
     [exec] 2019年 12月27日 金曜日 10時14分18秒 JST

BUILD SUCCESSFUL
Total time: 16 seconds
$ 
</pre>
</blockquote>
<blockquote><a name="RoyalBlueTriangle"><img src="images/version_0_R.jpg" width="402" height="424" alt="version_0_R"></a></blockquote>
<!--********************************************************************************************************************-->
<hr>
<p><a href="version0.html">←</a> <a href="version1.html">↑</a> <a href="version2.html">→</a></p>
<hr>
<div class="right-small">Updated: 2019/12/27 (Created: 2010/11/11) <a href="http://www.kyoto-su.ac.jp/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/KSU.jpg" width="115" height="30" alt="KSU"></a> <a href="http://www.cc.kyoto-su.ac.jp/~atsushi/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/AokiHanko.jpg" width="32" height="32" alt="AokiHanko"></a></div>
</body>
</html>
