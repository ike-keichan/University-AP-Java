<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta name="keywords" content="Aoki,Atsushi,Smalltalk,Smalltalker,Program,Programmer,Object,Oriented,Programming">
<meta name="description" content="青木淳（あおきあつし）のホームページ">
<meta name="author" content="AOKI Atsushi">
<link rev="made" href="mailto:atsushi@cc.kyoto-su.ac.jp">
<link rel="index" href="index-j.html">
<link rel="shortcut icon" href="http://www.cc.kyoto-su.ac.jp/~atsushi/icons/aoki.ico">
<style type="text/css">
<!--
body {
  background-color : #ffffff;
  margin : 20px;
  padding : 10px;
  font-family : serif;
  font-size : 10pt;
}
a {
  text-decoration : underline;
  color : #000000;
}
a:link {
  background-color : #ffddbb;
}
a:visited {
  background-color : #ccffcc;
}
a:hover {
  background-color : #dddddd;
}
a:active {
  background-color : #dddddd;
}
div.belt {
  background-color : #eeeeee;
  padding : 0px 4px;
}
div.belt-yellow {
  background-color : #ffffcc;
  padding : 0px 4px;
}
div.belt-blue {
  background-color : #ddeeff;
  padding : 0px 4px;
}
div.belt-pink {
  background-color : #ffeedd;
  padding : 0px 4px;
}
div.right-small {
  text-align : right;
  font-size : 8pt;
}
img.border {
  border-width : 1px;
  border-color : #000000;
  vertical-align : middle;
}
img.borderless {
  border-width : 0px;
  vertical-align : middle;
}
p.belt {
  background-color : #ffeedd;
  padding : 4px 8px;
}
p.belt-blue {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt-yellow {
  background-color : #ffffcc;
  padding : 4px 8px;
}
table {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
}
table.profile {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
  margin-top : 8px;
  margin-left : 8px;
  margin-right : 8px;
  margin-bottom : 8px;
}
table.belt {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  background-color : #ffeedd;
  padding : 0px 0px;
  width : 100%;
}
table.content {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
}
table.font-fixed {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
  font-family : monospace;
}
table.nest {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 0px 0px;
}
td {
  padding : 0px 0px;
  vertical-align : middle;
}
td.center {
  text-align : center;
}
td.center-half {
  text-align : center;
  width : 50%;
  font-size : 8pt;
}
td.center-small {
  text-align : center;
  font-size : 8pt;
  padding : 0px 4px;
}
td.center-small-nopadding {
  text-align : center;
  font-size : 8pt;
  padding : 0px 0px;
}
td.center-white {
  text-align : center;
  background-color : #ffffff;
}
td.center-small-white {
  text-align : center;
  font-size : 8pt;
  background-color : #ffffff;
}
td.center-border1 {
  text-align : center;
  vertical-align : middle;
  empty-cells : show;
  border-style : solid;
  border-width : 1px;
  border-color : #ffc080;
  width : 22px;
  height : 22px;
}
td.left-small {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
}
td.left-small-white {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
td.right-small {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
}
td.right-small-white {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
th {
  padding : 0px 0px;
  vertical-align : middle;
}
#menu {
  margin: 0px 0px 0px 0px;
  padding: 0px;
  height: 32px;
}
#menu ul {
  margin: 0px;
  padding: 0px;
  list-style: none;
  text-align: center;
  clear: both;
}
#menu li {
  margin: 0px 5px 0px 0px;
  padding: 0px;
  float: left;
}
#menu a {
  display: block;
  padding: 2px 4px;
  text-decoration: none;
  margin: 0px;
  font-weight: bold;
  background: #FFFFFF;
  color: #333333;
  border: 1px solid #666666;
}
#menu a:hover {
  display: block;
  padding: 2px 4px;
  border-bottom: 1px solid #000000;
  text-decoration: none;
  background: #FFCC66;
}
#menu .current {
  background-color: #F45F57;
  font-weight: bold;
  color: #FFFFFF;
  border: 1px solid #333333;
}
-->
</style>
<!-- SyntaxHighlighter BEGIN -->
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shCore.css" rel="stylesheet" type="text/css">
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shThemeEclipse.css" rel="stylesheet" type="text/css">
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shCore.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushJava.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPlain.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPython.js" type="text/javascript"></script>
<script type="text/javascript"> 
<!--
SyntaxHighlighter.config.bloggerMode = true;
SyntaxHighlighter.config.clipboardSwf = 'http://alexgorbatchev.com/pub/sh/current/scripts/clipboard.swf';
SyntaxHighlighter.all();
SyntaxHighlighter.defaults['auto-links'] = false;
-->
</script>
<!-- SyntaxHighlighter END -->
<title>Version 6：ビューにXYZ軸の回転角を導入する</title>
</head>
<body>
<div id="menu">
<ul>
  <li><a href="../Lectures/index-j.html#DragonProgrammingProcess">Javaプログラム集</a></li>
  <li><a href="index-j.html">ドラゴンのプログラミング過程とリファクタリング過程</a></li>
  <li><a href="version0.html">0</a></li>
  <li><a href="version1.html">1</a></li>
  <li><a href="version2.html">2</a></li>
  <li><a href="version3.html">3</a></li>
  <li><a href="version4.html">4</a></li>
  <li><a href="version5.html">5</a></li>
  <li><a href="version6.html" class="current">6</a></li>
  <li><a href="version7.html">7</a></li>
  <li><a href="version8.html">8</a></li>
  <li><a href="version9.html">9</a></li>
</ul>
</div>
<hr>
<!--********************************************************************************************************************-->
<h2>Version 6：ビューにXYZ軸の回転角を導入する</h2>
<p>描き出されているドラゴンを、マウスでつかんでグルグルと回転させ、横や後ろからも見ることができるようにしましょう。今回はそのための準備をします。ビューにX軸の回転角・Y軸の回転角・Z軸の回転角をそれぞれ保持します。加えて、それらをリセットするメソッド、x方向量とy方向量から回転量を算出して回転角を設定するメソッドも作成します。以下の差分（変更箇所：編集部分）やクラス階層（インヘリタンス）を参考にしながら、それに続くソースコード（Version 6）と同じになるように、プログラムを編集・加筆してください。</p>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="Differences">差分</a>（変更箇所：編集部分）</h3>
</div>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-pink">
【前バージョンからの差分＝変更箇所】
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0,0)]))' -->
<pre class="brush: plain; toolbar: false; first-line: 1; highlight: [];">
【ファイルやディレクトリの増減】
========================================
Compare:
./Version5
     1: dragon/Dragon.java
     2: dragon/Example.java
     3: mvc4jogl/OpenGLCompound.java
     4: mvc4jogl/OpenGLController.java
     5: mvc4jogl/OpenGLModel.java
     6: mvc4jogl/OpenGLObject.java
     7: mvc4jogl/OpenGLPolygon.java
     8: mvc4jogl/OpenGLProjection.java
     9: mvc4jogl/OpenGLTriangle.java
    10: mvc4jogl/OpenGLView.java
    11: mvc4jogl/Teapot.java
with:
./Version6
     1: dragon/Dragon.java
     2: dragon/Example.java
     3: mvc4jogl/OpenGLCompound.java
     4: mvc4jogl/OpenGLController.java
     5: mvc4jogl/OpenGLModel.java
     6: mvc4jogl/OpenGLObject.java
     7: mvc4jogl/OpenGLPolygon.java
     8: mvc4jogl/OpenGLProjection.java
     9: mvc4jogl/OpenGLTriangle.java
    10: mvc4jogl/OpenGLView.java
    11: mvc4jogl/Teapot.java
========================================
Added (or Removed) files:
========================================
【それぞれのファイルの変更】
----------------------------------------
Compare:
./Version5/dragon/Dragon.java
with:
./Version6/dragon/Dragon.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version5/dragon/Example.java
with:
./Version6/dragon/Example.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version5/mvc4jogl/OpenGLCompound.java
with:
./Version6/mvc4jogl/OpenGLCompound.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version5/mvc4jogl/OpenGLController.java
with:
./Version6/mvc4jogl/OpenGLController.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version5/mvc4jogl/OpenGLModel.java
with:
./Version6/mvc4jogl/OpenGLModel.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version5/mvc4jogl/OpenGLObject.java
with:
./Version6/mvc4jogl/OpenGLObject.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version5/mvc4jogl/OpenGLPolygon.java
with:
./Version6/mvc4jogl/OpenGLPolygon.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version5/mvc4jogl/OpenGLProjection.java
with:
./Version6/mvc4jogl/OpenGLProjection.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version5/mvc4jogl/OpenGLTriangle.java
with:
./Version6/mvc4jogl/OpenGLTriangle.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version5/mvc4jogl/OpenGLView.java
with:
./Version6/mvc4jogl/OpenGLView.java
----------------------------------------
Result:
61a62,76
&gt;      * X軸の回転角を記憶するフィールドである。
&gt;      */
&gt;     protected float angleX;
&gt; 
&gt;     /**
&gt;      * Y軸の回転角を記憶するフィールドである。
&gt;      */
&gt;     protected float angleY;
&gt; 
&gt;     /**
&gt;      * Z軸の回転角を記憶するフィールドである。
&gt;      */
&gt;     protected float angleZ;
&gt; 
&gt;     /**
77a93,156
&gt;         this.angleX = 0.0f;
&gt;         this.angleY = 30.0f;
&gt;         this.angleZ = 0.0f;
&gt; 
&gt;         return;
&gt;     }
&gt; 
&gt;     /**
&gt;      * X軸の回転角を応答する。
&gt;      * @return X軸の回転角
&gt;      */
&gt;     public float angleX()
&gt;     {
&gt;         return this.angleX;
&gt;     }
&gt; 
&gt;     /**
&gt;      * X軸の回転角を設定する。
&gt;      * @param angle X軸の回転角
&gt;      */
&gt;     public void angleX(float angle)
&gt;     {
&gt;         this.angleX = angle % 360.0f;
&gt; 
&gt;         return;
&gt;     }
&gt; 
&gt;     /**
&gt;      * Y軸の回転角を応答する。
&gt;      * @return Y軸の回転角
&gt;      */
&gt;     public float angleY()
&gt;     {
&gt;         return this.angleY;
&gt;     }
&gt; 
&gt;     /**
&gt;      * Y軸の回転角を設定する。
&gt;      * @param angle Y軸の回転角
&gt;      */
&gt;     public void angleY(float angle)
&gt;     {
&gt;         this.angleY = angle % 360.0f;
&gt; 
&gt;         return;
&gt;     }
&gt; 
&gt;     /**
&gt;      * Z軸の回転角を応答する。
&gt;      * @return Z軸の回転角
&gt;      */
&gt;     public float angleZ()
&gt;     {
&gt;         return this.angleZ;
&gt;     }
&gt; 
&gt;     /**
&gt;      * Z軸の回転角を設定する。
&gt;      * @param angle Z軸の回転角
&gt;      */
&gt;     public void angleZ(float angle)
&gt;     {
&gt;         this.angleZ = angle % 360.0f;
&gt; 
208a288,291
&gt;         this.gl.glRotatef(this.angleX, 1.0f, 0.0f, 0.0f);
&gt;         this.gl.glRotatef(this.angleY, 0.0f, 1.0f, 0.0f);
&gt;         this.gl.glRotatef(this.angleZ, 0.0f, 0.0f, 1.0f);
&gt; 
286a370,402
&gt; 
&gt;     /**
&gt;      * XYZ軸の回転角とプロジェクションをリセットする。
&gt;      */
&gt;     public void reset()
&gt;     {
&gt;         this.angleX = 0.0f;
&gt;         this.angleY = 0.0f;
&gt;         this.angleZ = 0.0f;
&gt;         this.model.projection().reset();
&gt; 
&gt;         return;
&gt;     }
&gt; 
&gt;     /**
&gt;      * X方向量とY方向量から回転量を算出して回転角を設定する。
&gt;      * @param amountX X方向量
&gt;      * @param amountY Y方向量
&gt;      */
&gt;     public void rotateXY(int amountX, int amountY)
&gt;     {
&gt;         Dimension size = this.canvas().getSize();
&gt; 
&gt;         // 回転量の算出：ウィンドウの端から端までで360度回転するようにする。
&gt;         float thetaY = 360.0f * ((float)(amountX) / (float)(size.width));
&gt;         float thetaX = 360.0f * ((float)(amountY) / (float)(size.height));
&gt; 
&gt;         // 角度の更新
&gt;         this.angleX(this.angleX() - thetaX);
&gt;         this.angleY(this.angleY() + thetaY);
&gt; 
&gt;         return;
&gt;     }
----------------------------------------
Compare:
./Version5/mvc4jogl/Teapot.java
with:
./Version6/mvc4jogl/Teapot.java
----------------------------------------
Result:
----------------------------------------
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="Inheritance">クラス階層</a>（インヘリタンス）</h3>
</div>
<!--********************************************************************************************************************-->
<ul style="list-style-type:circle;">
  <li>java.lang.Object
    <ul style="list-style-type:circle;">
      <li>dragon.<a href="#dragon_Example" title="dragon_Example">Example</a></li>
      <li>mvc4jogl.<a href="#mvc4jogl_OpenGLController" title="mvc4jogl_OpenGLController">OpenGLController</a> (implements java.awt.event.WindowListener)</li>
      <li>mvc4jogl.<a href="#mvc4jogl_OpenGLModel" title="mvc4jogl_OpenGLModel">OpenGLModel</a></li>
      <li>mvc4jogl.<a href="#mvc4jogl_OpenGLObject" title="mvc4jogl_OpenGLObject">OpenGLObject</a>
        <ul style="list-style-type:circle;">
          <li>mvc4jogl.<a href="#mvc4jogl_OpenGLCompound" title="mvc4jogl_OpenGLCompound">OpenGLCompound</a>
            <ul style="list-style-type:circle;">
              <li>dragon.<a href="#dragon_Dragon" title="dragon_Dragon">Dragon</a></li>
            </ul>
          </li>
          <li>mvc4jogl.<a href="#mvc4jogl_OpenGLPolygon" title="mvc4jogl_OpenGLPolygon">OpenGLPolygon</a></li>
          <li>mvc4jogl.<a href="#mvc4jogl_OpenGLTriangle" title="mvc4jogl_OpenGLTriangle">OpenGLTriangle</a></li>
          <li>mvc4jogl.<a href="#mvc4jogl_Teapot" title="mvc4jogl_Teapot">Teapot</a></li>
        </ul>
      </li>
      <li>mvc4jogl.<a href="#mvc4jogl_OpenGLProjection" title="mvc4jogl_OpenGLProjection">OpenGLProjection</a></li>
      <li>mvc4jogl.<a href="#mvc4jogl_OpenGLView" title="mvc4jogl_OpenGLView">OpenGLView</a> (implements javax.media.opengl.GLEventListener)</li>
    </ul>
  </li>
</ul>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="SourceCode">ソースコード</a>（Version 6）</h3>
</div>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-blue">
<h4><a name="dragon_Dragon">dragon.Dragon</a><span style="font-size: x-small;">（<a href="version5.html#dragon_Dragon"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-blue">
<h4><a name="dragon_Example">dragon.Example</a><span style="font-size: x-small;">（<a href="version5.html#dragon_Example"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLCompound">mvc4jogl.OpenGLCompound</a><span style="font-size: x-small;">（<a href="version3.html#mvc4jogl_OpenGLCompound"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLController">mvc4jogl.OpenGLController</a><span style="font-size: x-small;">（<a href="version5.html#mvc4jogl_OpenGLController"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLModel">mvc4jogl.OpenGLModel</a><span style="font-size: x-small;">（<a href="version5.html#mvc4jogl_OpenGLModel"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLObject">mvc4jogl.OpenGLObject</a><span style="font-size: x-small;">（<a href="version3.html#mvc4jogl_OpenGLObject"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLPolygon">mvc4jogl.OpenGLPolygon</a><span style="font-size: x-small;">（<a href="version3.html#mvc4jogl_OpenGLPolygon"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLProjection">mvc4jogl.OpenGLProjection</a><span style="font-size: x-small;">（<a href="version4.html#mvc4jogl_OpenGLProjection"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLTriangle">mvc4jogl.OpenGLTriangle</a><span style="font-size: x-small;">（<a href="version3.html#mvc4jogl_OpenGLTriangle"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLView">mvc4jogl.OpenGLView</a></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
package mvc4jogl;

import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.util.gl2.GLUT;

import com.jogamp.opengl.awt.GLCanvas;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLProfile;

import java.awt.Dimension;

/**
 * Ｖ：OpenGLを使ったJava三次元グラフィックスのためのビュー（View）である。
 */
public class OpenGLView extends Object implements GLEventListener
{
    /**
     * モデルを記憶するフィールドである。
     */
    protected OpenGLModel model;

    /**
     * コントローラを記憶するフィールドである。
     */
    protected OpenGLController controller;

    /**
     * OpenGLキャンバスを記憶するフィールドである。
     */
    protected GLCanvas canvas;

    /**
     * GLオブジェクトを記憶するフィールドである。
     */
    protected GL2 gl;

    /**
     * GLユーティリティを記憶するフィールドである。
     */
    protected GLU glu;

    /**
     * GLユーティリティツールキットを記憶するフィールドである。
     */
    protected GLUT glut;

    /**
     * ビューの幅を記憶するフィールドである。
     */
    protected int width;

    /**
     * ビューの高さを記憶するフィールドである。
     */
    protected int height;

    /**
     * X軸の回転角を記憶するフィールドである。
     */
    protected float angleX;

    /**
     * Y軸の回転角を記憶するフィールドである。
     */
    protected float angleY;

    /**
     * Z軸の回転角を記憶するフィールドである。
     */
    protected float angleZ;

    /**
     * ビューのコンストラクタである。
     * モデルと自分を指定してコントローラを生成することによりＭＶＣを形成する。
     * そして、OpenGLキャンバスを生成する。
     * @param aModel モデル
     */
    public OpenGLView(OpenGLModel aModel)
    {
        this.model = aModel;
        this.controller = new OpenGLController(model, this);

        // GLProfile profile = GLProfile.getDefault();
        GLProfile profile = GLProfile.get(GLProfile.GL2);
        GLCapabilities capabilities = new GLCapabilities(profile);
        capabilities.setDoubleBuffered(true);
        this.canvas = new GLCanvas(capabilities);

        this.angleX = 0.0f;
        this.angleY = 30.0f;
        this.angleZ = 0.0f;

        return;
    }

    /**
     * X軸の回転角を応答する。
     * @return X軸の回転角
     */
    public float angleX()
    {
        return this.angleX;
    }

    /**
     * X軸の回転角を設定する。
     * @param angle X軸の回転角
     */
    public void angleX(float angle)
    {
        this.angleX = angle % 360.0f;

        return;
    }

    /**
     * Y軸の回転角を応答する。
     * @return Y軸の回転角
     */
    public float angleY()
    {
        return this.angleY;
    }

    /**
     * Y軸の回転角を設定する。
     * @param angle Y軸の回転角
     */
    public void angleY(float angle)
    {
        this.angleY = angle % 360.0f;

        return;
    }

    /**
     * Z軸の回転角を応答する。
     * @return Z軸の回転角
     */
    public float angleZ()
    {
        return this.angleZ;
    }

    /**
     * Z軸の回転角を設定する。
     * @param angle Z軸の回転角
     */
    public void angleZ(float angle)
    {
        this.angleZ = angle % 360.0f;

        return;
    }

    /**
     * OpenGLキャンバスを応答する。
     * @return OpenGLキャンバス
     */
    public GLCanvas canvas()
    {
        return this.canvas;
    }

    /**
     * コントローラを応答する。
     * @return コントローラ
     */
    public OpenGLController controller()
    {
        return this.controller;
    }

    /**
     * GLを応答する。
     * @return GL2
     */
    public GL2 gl()
    {
        return this.gl;
    }

    /**
     * GLUを応答する。
     * @return GLU
     */
    public GLU glu()
    {
        return this.glu;
    }

    /**
     * GLUTを応答する。
     * @return GLUT
     */
    public GLUT glut()
    {
        return this.glut;
    }

    /**
     * OpenGL起動時に初期化のために呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     */
    public void init(GLAutoDrawable aDrawable)
    {
        // System.out.println("init");

        // グラフィックライブラリ（gl）を獲得し、
        // グラフィックライブラリユーティリティ（glu）と
        // グラフィックライブラリユーティリティツールキット（glut）を生成する。
        this.gl = aDrawable.getGL().getGL2();
        this.glu = new GLU();
        this.glut = new GLUT();

        // 材質の有効化
        // 陰線隠面処理の有効化
        // 片面表示機能の無効化
        // 法線ベクトルの有効化
        this.gl.glEnable(GL2.GL_COLOR_MATERIAL);
        this.gl.glEnable(GL2.GL_DEPTH_TEST);
        this.gl.glDisable(GL2.GL_CULL_FACE);
        this.gl.glEnable(GL2.GL_NORMALIZE);

        return;
    }

    /**
     * OpenGL描画を行う際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     */
    public void display(GLAutoDrawable aDrawable)
    {
        // System.out.println("display");
        // aDrawable.swapBuffers();

        // 視界（視点・注視点・上方向ベクトル・視界角・近・遠）を整（設）える。
        OpenGLProjection projection = this.model.projection();
        double[] eyePoint = projection.eyePoint();
        double[] sightPoint = projection.sightPoint();
        double[] upVector = projection.upVector();
        double fovy = projection.fovy();
        double near = projection.near();
        double far = projection.far();

        // キャンバス（ウィンドウ）の大きさからアスペクト比を求める。
        double aspect = (double)width / (double)height;

        // プロジェクション（遠近法）を設定する。
        this.gl.glMatrixMode(GL2.GL_PROJECTION);
        this.gl.glLoadIdentity();
        this.glu.gluPerspective(fovy, aspect, near, far);

        // 視界を設定する。
        this.gl.glMatrixMode(GL2.GL_MODELVIEW);
        this.gl.glLoadIdentity();
        this.glu.gluLookAt(
                eyePoint[0], eyePoint[1], eyePoint[2],
                sightPoint[0], sightPoint[1], sightPoint[2],
                upVector[0], upVector[1], upVector[2]);

        // キャンバスをクリアする。
        this.gl.glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
        this.gl.glClear(GL2.GL_COLOR_BUFFER_BIT | GL2.GL_DEPTH_BUFFER_BIT);

        // 照明を設定する。
        this.gl.glEnable(GL2.GL_LIGHTING);
        this.gl.glLightModelfv(GL2.GL_LIGHT_MODEL_AMBIENT, OpenGLObject.asFloatBuffer(new float[] { 0.5f, 0.5f, 0.5f, 1.0f }));
        this.gl.glLightModelf(GL2.GL_LIGHT_MODEL_LOCAL_VIEWER, 0.0f);
        this.gl.glLightModelf(GL2.GL_LIGHT_MODEL_TWO_SIDE, 1.0f);
        this.gl.glEnable(GL2.GL_LIGHT0);
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_POSITION, OpenGLObject.asFloatBuffer(new float[] { 0.0f, 0.0f, 1.0f, 0.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_SPOT_DIRECTION, OpenGLObject.asFloatBuffer(new float[] { 0.0f, 0.0f, -1.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_SPOT_CUTOFF, OpenGLObject.asFloatBuffer(new float[] { 90.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_DIFFUSE, OpenGLObject.asFloatBuffer(new float[] { 0.5f, 0.5f, 0.5f, 1.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_SPECULAR, OpenGLObject.asFloatBuffer(new float[] { 0.5f, 0.5f, 0.5f, 1.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_LINEAR_ATTENUATION, OpenGLObject.asFloatBuffer(new float[] { 0.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_QUADRATIC_ATTENUATION, OpenGLObject.asFloatBuffer(new float[] { 0.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_CONSTANT_ATTENUATION, OpenGLObject.asFloatBuffer(new float[] { 1.0f }));

        // 世界座標系（XYZ軸）を描画する。
        this.displayAxes();

        this.gl.glRotatef(this.angleX, 1.0f, 0.0f, 0.0f);
        this.gl.glRotatef(this.angleY, 0.0f, 1.0f, 0.0f);
        this.gl.glRotatef(this.angleZ, 0.0f, 0.0f, 1.0f);

        // モデルの描画オブジェクトを描画する。
        this.model.rendering();

        return;
    }

    /**
     * XYZ軸（世界座標系）を描画する。
     */
    public void displayAxes()
    {
        double scale = this.model.axesScale();

        this.gl.glBegin(GL2.GL_LINES);

        // X軸（赤）
        this.gl.glColor4d(1.0d, 0.0d, 0.0d, 1.0d);
        this.gl.glVertex3d(-1.000d * scale, 0.0d, 0.0d);
        this.gl.glVertex3d( 1.618d * scale, 0.0d, 0.0d);

        // Y軸（緑）
        this.gl.glColor4d(0.0d, 1.0d, 0.0d, 1.0d);
        this.gl.glVertex3d(0.0d, -1.000d * scale, 0.0d);
        this.gl.glVertex3d(0.0d,  1.618d * scale, 0.0d);

        // Z軸（青）
        this.gl.glColor4d(0.0d, 0.0d, 1.0d, 1.0d);
        this.gl.glVertex3d(0.0d, 0.0d, -1.000d * scale);
        this.gl.glVertex3d(0.0d, 0.0d,  1.618d * scale);

        this.gl.glEnd();

        return;
    }

    /**
     * OpenGL表示モードや表示デバイスが変更された際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     * @param modeChanged 表示モードが変更されたか否か
     * @param deviceChanged 表示デバイスが変更されたか否か
     */
    public void displayChanged(GLAutoDrawable aDrawable, boolean modeChanged, boolean deviceChanged)
    {
        // System.out.println("displayChanged");

        return;
    }

    /**
     * OpenGLの資源が破棄された際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     */
    public void dispose(GLAutoDrawable aDrawable)
    {
        // System.out.println("dispose");

        return;
    }

    /**
     * OpenGL表示領域が変更された際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     * @param x 表示領域のX座標
     * @param y 表示領域のY座標
     * @param w 表示領域の幅
     * @param h 表示領域の高さ
     */
    public void reshape(GLAutoDrawable aDrawable, int x, int y, int w, int h)
    {
        // System.out.println("reshape");

        this.width = w;
        this.height = h;

        this.gl.glViewport(0, 0, width, height);

        return;
    }

    /**
     * XYZ軸の回転角とプロジェクションをリセットする。
     */
    public void reset()
    {
        this.angleX = 0.0f;
        this.angleY = 0.0f;
        this.angleZ = 0.0f;
        this.model.projection().reset();

        return;
    }

    /**
     * X方向量とY方向量から回転量を算出して回転角を設定する。
     * @param amountX X方向量
     * @param amountY Y方向量
     */
    public void rotateXY(int amountX, int amountY)
    {
        Dimension size = this.canvas().getSize();

        // 回転量の算出：ウィンドウの端から端までで360度回転するようにする。
        float thetaY = 360.0f * ((float)(amountX) / (float)(size.width));
        float thetaX = 360.0f * ((float)(amountY) / (float)(size.height));

        // 角度の更新
        this.angleX(this.angleX() - thetaX);
        this.angleY(this.angleY() + thetaY);

        return;
    }
}
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_Teapot">mvc4jogl.Teapot</a><span style="font-size: x-small;">（<a href="version3.html#mvc4jogl_Teapot"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="BuildAndResult">ビルド＆実行結果</a>（Version 6）</h3>
</div>
<p>では、実行してみましょう。Y軸まわりに（緑色の軸を右手系で）30度だけ回転している結果が得られます。ビューのコンストラクタにおいて「<code>angleY = 30.0f;</code>」としておいたからです。</p>
<blockquote>
<pre>
$ <span style="color:#ff0000">make test</span>
env LC_ALL=ja_JP.UTF-8 ant test
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Buildfile: /Users/aoki/Developments/Languages/Java/Dragon/Version6/build.xml

prepare:
     [exec] 2019年 12月27日 金曜日 11時14分17秒 JST

compile:
    [javac] Compiling 11 source files to /Users/aoki/Developments/Languages/Java/Dragon/Version6/Classes
    [javac] Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
     [exec] 2019年 12月27日 金曜日 11時14分19秒 JST

jar:
      [jar] Building jar: /Users/aoki/Developments/Languages/Java/Dragon/Version6/dragon.jar
      [jar] Building jar: /Users/aoki/Developments/Languages/Java/Dragon/Version6/dragon-natives-macosx-universal.jar
     [exec] 2019年 12月27日 金曜日 11時14分20秒 JST

all:
     [exec] 2019年 12月27日 金曜日 11時14分20秒 JST

test:
     [exec] Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
     [exec] 2019年 12月27日 金曜日 11時14分25秒 JST

BUILD SUCCESSFUL
Total time: 8 seconds
$ 
</pre>
</blockquote>
<blockquote><img src="images/version_6_R.jpg" width="402" height="424" alt="version_6_R"></blockquote>
<!--********************************************************************************************************************-->
<hr>
<p><a href="version5.html">←</a> <a href="version6.html">↑</a> <a href="version7.html">→</a></p>
<hr>
<div class="right-small">Updated: 2019/12/27 (Created: 2010/11/11) <a href="http://www.kyoto-su.ac.jp/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/KSU.jpg" width="115" height="30" alt="KSU"></a> <a href="http://www.cc.kyoto-su.ac.jp/~atsushi/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/AokiHanko.jpg" width="32" height="32" alt="AokiHanko"></a></div>
</body>
</html>
