<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta name="keywords" content="Aoki,Atsushi,Smalltalk,Smalltalker,Program,Programmer,Object,Oriented,Programming">
<meta name="description" content="青木淳（あおきあつし）のホームページ">
<meta name="author" content="AOKI Atsushi">
<link rev="made" href="mailto:atsushi@cc.kyoto-su.ac.jp">
<link rel="index" href="index-j.html">
<link rel="shortcut icon" href="http://www.cc.kyoto-su.ac.jp/~atsushi/icons/aoki.ico">
<style type="text/css">
<!--
body {
  background-color : #ffffff;
  margin : 20px;
  padding : 10px;
  font-family : serif;
  font-size : 10pt;
}
a {
  text-decoration : underline;
  color : #000000;
}
a:link {
  background-color : #ffddbb;
}
a:visited {
  background-color : #ccffcc;
}
a:hover {
  background-color : #dddddd;
}
a:active {
  background-color : #dddddd;
}
div.belt {
  background-color : #eeeeee;
  padding : 0px 4px;
}
div.belt-yellow {
  background-color : #ffffcc;
  padding : 0px 4px;
}
div.belt-blue {
  background-color : #ddeeff;
  padding : 0px 4px;
}
div.belt-pink {
  background-color : #ffeedd;
  padding : 0px 4px;
}
div.right-small {
  text-align : right;
  font-size : 8pt;
}
img.border {
  border-width : 1px;
  border-color : #000000;
  vertical-align : middle;
}
img.borderless {
  border-width : 0px;
  vertical-align : middle;
}
p.belt {
  background-color : #ffeedd;
  padding : 4px 8px;
}
p.belt-blue {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt-yellow {
  background-color : #ffffcc;
  padding : 4px 8px;
}
table {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
}
table.profile {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
  margin-top : 8px;
  margin-left : 8px;
  margin-right : 8px;
  margin-bottom : 8px;
}
table.belt {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  background-color : #ffeedd;
  padding : 0px 0px;
  width : 100%;
}
table.content {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
}
table.font-fixed {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
  font-family : monospace;
}
table.nest {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 0px 0px;
}
td {
  padding : 0px 0px;
  vertical-align : middle;
}
td.center {
  text-align : center;
}
td.center-half {
  text-align : center;
  width : 50%;
  font-size : 8pt;
}
td.center-small {
  text-align : center;
  font-size : 8pt;
  padding : 0px 4px;
}
td.center-small-nopadding {
  text-align : center;
  font-size : 8pt;
  padding : 0px 0px;
}
td.center-white {
  text-align : center;
  background-color : #ffffff;
}
td.center-small-white {
  text-align : center;
  font-size : 8pt;
  background-color : #ffffff;
}
td.center-border1 {
  text-align : center;
  vertical-align : middle;
  empty-cells : show;
  border-style : solid;
  border-width : 1px;
  border-color : #ffc080;
  width : 22px;
  height : 22px;
}
td.left-small {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
}
td.left-small-white {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
td.right-small {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
}
td.right-small-white {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
th {
  padding : 0px 0px;
  vertical-align : middle;
}
#menu {
  margin: 0px 0px 0px 0px;
  padding: 0px;
  height: 32px;
}
#menu ul {
  margin: 0px;
  padding: 0px;
  list-style: none;
  text-align: center;
  clear: both;
}
#menu li {
  margin: 0px 5px 0px 0px;
  padding: 0px;
  float: left;
}
#menu a {
  display: block;
  padding: 2px 4px;
  text-decoration: none;
  margin: 0px;
  font-weight: bold;
  background: #FFFFFF;
  color: #333333;
  border: 1px solid #666666;
}
#menu a:hover {
  display: block;
  padding: 2px 4px;
  border-bottom: 1px solid #000000;
  text-decoration: none;
  background: #FFCC66;
}
#menu .current {
  background-color: #F45F57;
  font-weight: bold;
  color: #FFFFFF;
  border: 1px solid #333333;
}
-->
</style>
<!-- SyntaxHighlighter BEGIN -->
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shCore.css" rel="stylesheet" type="text/css">
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shThemeEclipse.css" rel="stylesheet" type="text/css">
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shCore.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushJava.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPlain.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPython.js" type="text/javascript"></script>
<script type="text/javascript"> 
<!--
SyntaxHighlighter.config.bloggerMode = true;
SyntaxHighlighter.config.clipboardSwf = 'http://alexgorbatchev.com/pub/sh/current/scripts/clipboard.swf';
SyntaxHighlighter.all();
SyntaxHighlighter.defaults['auto-links'] = false;
-->
</script>
<!-- SyntaxHighlighter END -->
<title>Version 8：コントローラにキーリスナーを実装し、キーボードから回転・拡大・縮小・リセットができるようにする</title>
</head>
<body>
<div id="menu">
<ul>
  <li><a href="../Lectures/index-j.html#DragonProgrammingProcess">Javaプログラム集</a></li>
  <li><a href="index-j.html">ドラゴンのプログラミング過程とリファクタリング過程</a></li>
  <li><a href="version0.html">0</a></li>
  <li><a href="version1.html">1</a></li>
  <li><a href="version2.html">2</a></li>
  <li><a href="version3.html">3</a></li>
  <li><a href="version4.html">4</a></li>
  <li><a href="version5.html">5</a></li>
  <li><a href="version6.html">6</a></li>
  <li><a href="version7.html">7</a></li>
  <li><a href="version8.html" class="current">8</a></li>
  <li><a href="version9.html">9</a></li>
</ul>
</div>
<hr>
<!--********************************************************************************************************************-->
<h2>Version 8：コントローラにキーリスナーを実装し、キーボードから回転・拡大・縮小・リセットができるようにする</h2>
<p>前回にマウス関連リスナーを実装しましたので、今回はキーリスナーを実装して、キーボードからキー入力を受けつけ、XYZ軸のぞれぞれの軸に正方向の回転と逆方向の回転、拡大と縮小、そして、開いたときの状態に戻すリセットが行えるようにプログラムを改良しましょう。以下の差分（変更箇所：編集部分）やクラス階層（インヘリタンス）を参考にしながら、それに続くソースコード（Version 8）と同じになるように、プログラムを編集・加筆してください。</p>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="Differences">差分</a>（変更箇所：編集部分）</h3>
</div>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-pink">
【前バージョンからの差分＝変更箇所】
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0,0)]))' -->
<pre class="brush: plain; toolbar: false; first-line: 1; highlight: [];">
【ファイルやディレクトリの増減】
========================================
Compare:
./Version7
     1: dragon/Dragon.java
     2: dragon/Example.java
     3: mvc4jogl/OpenGLCompound.java
     4: mvc4jogl/OpenGLController.java
     5: mvc4jogl/OpenGLModel.java
     6: mvc4jogl/OpenGLObject.java
     7: mvc4jogl/OpenGLPolygon.java
     8: mvc4jogl/OpenGLProjection.java
     9: mvc4jogl/OpenGLTriangle.java
    10: mvc4jogl/OpenGLView.java
    11: mvc4jogl/Teapot.java
with:
./Version8
     1: dragon/Dragon.java
     2: dragon/Example.java
     3: mvc4jogl/OpenGLCompound.java
     4: mvc4jogl/OpenGLController.java
     5: mvc4jogl/OpenGLModel.java
     6: mvc4jogl/OpenGLObject.java
     7: mvc4jogl/OpenGLPolygon.java
     8: mvc4jogl/OpenGLProjection.java
     9: mvc4jogl/OpenGLTriangle.java
    10: mvc4jogl/OpenGLView.java
    11: mvc4jogl/Teapot.java
========================================
Added (or Removed) files:
========================================
【それぞれのファイルの変更】
----------------------------------------
Compare:
./Version7/dragon/Dragon.java
with:
./Version8/dragon/Dragon.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version7/dragon/Example.java
with:
./Version8/dragon/Example.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version7/mvc4jogl/OpenGLCompound.java
with:
./Version8/mvc4jogl/OpenGLCompound.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version7/mvc4jogl/OpenGLController.java
with:
./Version8/mvc4jogl/OpenGLController.java
----------------------------------------
Result:
2a3,4
&gt; import java.awt.event.KeyEvent;
&gt; import java.awt.event.KeyListener;
16c18
&lt; public class OpenGLController extends Object implements MouseListener, MouseMotionListener, MouseWheelListener, WindowListener
---
&gt; public class OpenGLController extends Object implements KeyListener, MouseListener, MouseMotionListener, MouseWheelListener, WindowListener
51a54,119
&gt;     // --- KeyListener -----------------------------------------------------
&gt; 
&gt;     /**
&gt;      * キーを押しているときに呼び出される。
&gt;      * @param aKeyEvent キーイベント
&gt;      */
&gt;     public void keyPressed(KeyEvent aKeyEvent)
&gt;     {
&gt;         // System.out.println(aKeyEvent.paramString());
&gt; 
&gt;         OpenGLView aView = this.view;
&gt;         OpenGLProjection aProjection = this.model.projection();
&gt; 
&gt;         char key = aKeyEvent.getKeyChar();
&gt;         // System.out.println(key);
&gt;         if (key == 'r') { aView.reset(); }
&gt;         if (key == 'R') { aView.reset(); }
&gt;         if (key == 'x') { aView.angleX(aView.angleX() + 1.0f); }
&gt;         if (key == 'X') { aView.angleX(aView.angleX() - 1.0f); }
&gt;         if (key == 'y') { aView.angleY(aView.angleY() + 1.0f); }
&gt;         if (key == 'Y') { aView.angleY(aView.angleY() - 1.0f); }
&gt;         if (key == 'z') { aView.angleZ(aView.angleZ() + 1.0f); }
&gt;         if (key == 'Z') { aView.angleZ(aView.angleZ() - 1.0f); }
&gt;         if (key == 's') { aProjection.fovy(aProjection.fovy() + 1.0d); }
&gt;         if (key == 'S') { aProjection.fovy(aProjection.fovy() - 1.0d); }
&gt; 
&gt;         int code = aKeyEvent.getKeyCode();
&gt;         // System.out.println(code);
&gt;         if (code == 10) { aView.reset(); }                               // エンター（リターン）キー
&gt;         if (code == 17) { aProjection.fovy(aProjection.fovy() - 1.0d); } // コントロールキー
&gt;         if (code == 18) { aProjection.fovy(aProjection.fovy() + 1.0d); } // オプション（オルト）キー
&gt;         if (code == 27) { aView.reset(); }                               // エスケープキー
&gt;         if (code == 37) { this.view.rotateXY(-1, 0); }                   // 左矢印キー
&gt;         if (code == 38) { this.view.rotateXY(0, 1); }                    // 上矢印キー
&gt;         if (code == 39) { this.view.rotateXY(1, 0); }                    // 右矢印キー
&gt;         if (code == 40) { this.view.rotateXY(0, -1); }                   // 下矢印キー
&gt; 
&gt;         aView.canvas().display();
&gt; 
&gt;         return;
&gt;     }
&gt; 
&gt;     /**
&gt;      * キーを離したときに呼び出される。
&gt;      * @param aKeyEvent キーイベント
&gt;      */
&gt;     public void keyReleased(KeyEvent aKeyEvent)
&gt;     {
&gt;         // System.out.println(aKeyEvent.paramString());
&gt; 
&gt;         return;
&gt;     }
&gt; 
&gt;     /**
&gt;      * キーを入力しているときに呼び出される。
&gt;      * @param aKeyEvent キーイベント
&gt;      */
&gt;     public void keyTyped(KeyEvent aKeyEvent)
&gt;     {
&gt;         // System.out.println(aKeyEvent.paramString());
&gt; 
&gt;         return;
&gt;     }
&gt; 
&gt;     // ---------------------------------------------------------------------
&gt; 
----------------------------------------
Compare:
./Version7/mvc4jogl/OpenGLModel.java
with:
./Version8/mvc4jogl/OpenGLModel.java
----------------------------------------
Result:
127a128
&gt;         aCanvas.addKeyListener(aController);
----------------------------------------
Compare:
./Version7/mvc4jogl/OpenGLObject.java
with:
./Version8/mvc4jogl/OpenGLObject.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version7/mvc4jogl/OpenGLPolygon.java
with:
./Version8/mvc4jogl/OpenGLPolygon.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version7/mvc4jogl/OpenGLProjection.java
with:
./Version8/mvc4jogl/OpenGLProjection.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version7/mvc4jogl/OpenGLTriangle.java
with:
./Version8/mvc4jogl/OpenGLTriangle.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version7/mvc4jogl/OpenGLView.java
with:
./Version8/mvc4jogl/OpenGLView.java
----------------------------------------
Result:
----------------------------------------
Compare:
./Version7/mvc4jogl/Teapot.java
with:
./Version8/mvc4jogl/Teapot.java
----------------------------------------
Result:
----------------------------------------
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="Inheritance">クラス階層</a>（インヘリタンス）</h3>
</div>
<ul style="list-style-type:circle;">
  <li>java.lang.Object
    <ul style="list-style-type:circle;">
      <li>dragon.<a href="#dragon_Example" title="dragon_Example">Example</a></li>
      <li>mvc4jogl.<a href="#mvc4jogl_OpenGLController" title="mvc4jogl_OpenGLController">OpenGLController</a> (implements java.awt.event.KeyListener, java.awt.event.MouseListener, java.awt.event.MouseMotionListener, java.awt.event.MouseWheelListener, java.awt.event.WindowListener)</li>
      <li>mvc4jogl.<a href="#mvc4jogl_OpenGLModel" title="mvc4jogl_OpenGLModel">OpenGLModel</a></li>
      <li>mvc4jogl.<a href="#mvc4jogl_OpenGLObject" title="mvc4jogl_OpenGLObject">OpenGLObject</a>
        <ul style="list-style-type:circle;">
          <li>mvc4jogl.<a href="#mvc4jogl_OpenGLCompound" title="mvc4jogl_OpenGLCompound">OpenGLCompound</a>
            <ul style="list-style-type:circle;">
              <li>dragon.<a href="#dragon_Dragon" title="dragon_Dragon">Dragon</a></li>
            </ul>
          </li>
          <li>mvc4jogl.<a href="#mvc4jogl_OpenGLPolygon" title="mvc4jogl_OpenGLPolygon">OpenGLPolygon</a></li>
          <li>mvc4jogl.<a href="#mvc4jogl_OpenGLTriangle" title="mvc4jogl_OpenGLTriangle">OpenGLTriangle</a></li>
          <li>mvc4jogl.<a href="#mvc4jogl_Teapot" title="mvc4jogl_Teapot">Teapot</a></li>
        </ul>
      </li>
      <li>mvc4jogl.<a href="#mvc4jogl_OpenGLProjection" title="mvc4jogl_OpenGLProjection">OpenGLProjection</a></li>
      <li>mvc4jogl.<a href="#mvc4jogl_OpenGLView" title="mvc4jogl_OpenGLView">OpenGLView</a> (implements javax.media.opengl.GLEventListener)</li>
    </ul>
  </li>
</ul>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="SourceCode">ソースコード</a>（Version 8）</h3>
</div>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-blue">
<h4><a name="dragon_Dragon">dragon.Dragon</a><span style="font-size: x-small;">（<a href="version5.html#dragon_Dragon"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-blue">
<h4><a name="dragon_Example">dragon.Example</a><span style="font-size: x-small;">（<a href="version5.html#dragon_Example"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLCompound">mvc4jogl.OpenGLCompound</a><span style="font-size: x-small;">（<a href="version3.html#mvc4jogl_OpenGLCompound"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLController">mvc4jogl.OpenGLController</a></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
package mvc4jogl;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import java.awt.Dimension;

/**
 * Ｃ：OpenGLを使ったJava三次元グラフィックスのためのコントローラ（Controller）である。
 */
public class OpenGLController extends Object implements KeyListener, MouseListener, MouseMotionListener, MouseWheelListener, WindowListener
{
    /**
     * モデルを記憶するフィールドである。
     */
    protected OpenGLModel model;

    /**
     * ビューを記憶するフィールドである。
     */
    protected OpenGLView view;

    /**
     * マウスボタンが押された位置のX座標を記憶するフィールドである。
     */
    protected int mousePressedX;

    /**
     * マウスボタンが押された位置のY座標を記憶するフィールドである。
     */
    protected int mousePressedY;

    /**
     * コントローラのコンストラクタである。
     * モデルとビューを引数にしてコントローラのインスタンスを応答する。
     * @param aModel モデル
     * @param aView ビュー
     */
    public OpenGLController(OpenGLModel aModel, OpenGLView aView)
    {
        model = aModel;
        view = aView;

        return;
    }

    // --- KeyListener -----------------------------------------------------

    /**
     * キーを押しているときに呼び出される。
     * @param aKeyEvent キーイベント
     */
    public void keyPressed(KeyEvent aKeyEvent)
    {
        // System.out.println(aKeyEvent.paramString());

        OpenGLView aView = this.view;
        OpenGLProjection aProjection = this.model.projection();

        char key = aKeyEvent.getKeyChar();
        // System.out.println(key);
        if (key == 'r') { aView.reset(); }
        if (key == 'R') { aView.reset(); }
        if (key == 'x') { aView.angleX(aView.angleX() + 1.0f); }
        if (key == 'X') { aView.angleX(aView.angleX() - 1.0f); }
        if (key == 'y') { aView.angleY(aView.angleY() + 1.0f); }
        if (key == 'Y') { aView.angleY(aView.angleY() - 1.0f); }
        if (key == 'z') { aView.angleZ(aView.angleZ() + 1.0f); }
        if (key == 'Z') { aView.angleZ(aView.angleZ() - 1.0f); }
        if (key == 's') { aProjection.fovy(aProjection.fovy() + 1.0d); }
        if (key == 'S') { aProjection.fovy(aProjection.fovy() - 1.0d); }

        int code = aKeyEvent.getKeyCode();
        // System.out.println(code);
        if (code == 10) { aView.reset(); }                               // エンター（リターン）キー
        if (code == 17) { aProjection.fovy(aProjection.fovy() - 1.0d); } // コントロールキー
        if (code == 18) { aProjection.fovy(aProjection.fovy() + 1.0d); } // オプション（オルト）キー
        if (code == 27) { aView.reset(); }                               // エスケープキー
        if (code == 37) { this.view.rotateXY(-1, 0); }                   // 左矢印キー
        if (code == 38) { this.view.rotateXY(0, 1); }                    // 上矢印キー
        if (code == 39) { this.view.rotateXY(1, 0); }                    // 右矢印キー
        if (code == 40) { this.view.rotateXY(0, -1); }                   // 下矢印キー

        aView.canvas().display();

        return;
    }

    /**
     * キーを離したときに呼び出される。
     * @param aKeyEvent キーイベント
     */
    public void keyReleased(KeyEvent aKeyEvent)
    {
        // System.out.println(aKeyEvent.paramString());

        return;
    }

    /**
     * キーを入力しているときに呼び出される。
     * @param aKeyEvent キーイベント
     */
    public void keyTyped(KeyEvent aKeyEvent)
    {
        // System.out.println(aKeyEvent.paramString());

        return;
    }

    // ---------------------------------------------------------------------

    // --- MouseListener ---------------------------------------------------

    /**
     * ビュー上でマウスボタンをクリック (押してから離す) したときに呼び出される。
     * @param aMouseEvent マウスイベント
     */
    public void mouseClicked(MouseEvent aMouseEvent)
    {
        // System.out.println(aMouseEvent.paramString());

        return;
    }

    /**
     * ビューにマウスが入ると呼び出される。
     * @param aMouseEvent マウスイベント
     */
    public void mouseEntered(MouseEvent aMouseEvent)
    {
        // System.out.println(aMouseEvent.paramString());

        return;
    }

    /**
     * ビューからマウスが出ると呼び出される。
     * @param aMouseEvent マウスイベント
     */
    public void mouseExited(MouseEvent aMouseEvent)
    {
        // System.out.println(aMouseEvent.paramString());

        return;
    }

    /**
     * ビュー上でマウスボタンが押されると呼び出される。
     * @param aMouseEvent マウスイベント
     */
    public void mousePressed(MouseEvent aMouseEvent)
    {
        // System.out.println(aMouseEvent.paramString());
        mousePressedX = aMouseEvent.getX();
        mousePressedY = aMouseEvent.getY();

        return;
    }

    /**
     * ビュー上でマウスボタンが離されると呼び出される。
     * @param aMouseEvent マウスイベント
     */
    public void mouseReleased(MouseEvent aMouseEvent)
    {
        // System.out.println(aMouseEvent.paramString());

        return;
    }

    // ---------------------------------------------------------------------

    // --- MouseMotionListener ---------------------------------------------

    /**
     * ビュー上でマウスのボタンを押してドラッグすると呼び出される。
     * @param aMouseEvent マウスイベント
     */
    public void mouseDragged(MouseEvent aMouseEvent)
    {
        // System.out.println(aMouseEvent.paramString());
        int x = aMouseEvent.getX();
        int y = aMouseEvent.getY();

        this.view.rotateXY(x - mousePressedX, mousePressedY - y);

        mousePressedX = x;
        mousePressedY = y;

        this.view.canvas().display();

        return;
    }

    /**
     * ボタンを押さずに、マウスカーソルをビュー上に移動すると呼び出される。
     * @param aMouseEvent マウスイベント
     */
    public void mouseMoved(MouseEvent aMouseEvent)
    {
        // System.out.println(aMouseEvent.paramString());

        return;
    }

    // ---------------------------------------------------------------------

    // --- MouseWheelListener ----------------------------------------------

    /**
     * マウスホイールが回転すると呼び出される。
     * @param aMouseWheelEvent マウスホイールイベント
     */
    public void mouseWheelMoved(MouseWheelEvent aMouseWheelEvent)
    {
        // System.out.println(aMouseWheelEvent.paramString());

        return;
    }

    // ---------------------------------------------------------------------

    // --- WindowListener --------------------------------------------------

    /**
     * ウィンドウがに設定されると呼び出される。
     * @param aWindowEvent ウィンドウイベント
     */
    public void windowActivated(WindowEvent aWindowEvent)
    {
        // System.out.println(aWindowEvent.paramString());

        return;
    }

    /**
     * ウィンドウに対するdisposeの呼び出しの結果として、ウィンドウがクローズされたときに呼び出される。
     * @param aWindowEvent ウィンドウイベント
     */
    public void windowClosed(WindowEvent aWindowEvent)
    {
        // System.out.println(aWindowEvent.paramString());

        return;
    }

    /**
     * ウィンドウを閉じようとした時に呼び出される。
     * @param aWindowEvent ウィンドウイベント
     */
    public void windowClosing(WindowEvent aWindowEvent)
    {
        // System.out.println(aWindowEvent.paramString());

        // 終了する。
        System.exit(0);

        return;
    }

    /**
     * ウィンドウがアクティブでなくなったときに呼び出される。
     * @param aWindowEvent ウィンドウイベント
     */
    public void windowDeactivated(WindowEvent aWindowEvent)
    {
        // System.out.println(aWindowEvent.paramString());

        return;
    }

    /**
     * ウィンドウが最小化された状態から通常の状態に変更されたときに呼び出される。
     * @param aWindowEvent ウィンドウイベント
     */
    public void windowDeiconified(WindowEvent aWindowEvent)
    {
        // System.out.println(aWindowEvent.paramString());

        return;
    }

    /**
     * ウィンドウが通常の状態から最小化された状態に変更されたときに呼び出される。
     * @param aWindowEvent ウィンドウイベント
     */
    public void windowIconified(WindowEvent aWindowEvent)
    {
        // System.out.println(aWindowEvent.paramString());

        return;
    }

    /**
     * ウィンドウが最初に可視になったときに呼び出される。
     * @param aWindowEvent ウィンドウイベント
     */
    public void windowOpened(WindowEvent aWindowEvent)
    {
        // System.out.println(aWindowEvent.paramString());

        return;
    }

    // ---------------------------------------------------------------------
}
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLModel">mvc4jogl.OpenGLModel</a></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
package mvc4jogl;

import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.util.gl2.GLUT;

import com.jogamp.opengl.awt.GLCanvas;

import java.awt.Frame;

/**
 * Ｍ：OpenGLを使ったJava三次元グラフィックスのためのモデル（Model）である。
 */
public class OpenGLModel extends Object
{
    /**
     * 描画オブジェクトを記憶するフィールドである。
     */
    protected OpenGLObject displayObject;

    /**
     * プロジェクションを記憶するフィールドである。
     */
    protected OpenGLProjection projection;

    /**
     * 高速描画のためのディスプレイリストを記憶するフィールドである。
     */
    protected int displayList;

    /**
     * ビューを記憶するフィールドである。
     */
    protected OpenGLView view;

    /**
     * XYZ軸のスケール（大きさ）を記憶するフィールドである。
     */
    protected double axesScale;

    /**
     * ウィンドウタイトルを記憶するフィールドである。
     */
    protected String windowTitle;

    /**
     * モデルのコンストラクタである。
     * 自分を指定してビューを生成することによりＭＶＣを形成する。
     * @param aBody 描画オブジェクト
     */
    public OpenGLModel(OpenGLObject aBody)
    {
        this.displayObject = aBody;
        this.projection = new OpenGLProjection();
        this.displayList = 0;
        this.view = new OpenGLView(this);
        this.axesScale = 1.0;
        this.windowTitle = "Untitled";

        return;
    }

    /**
     * XYZ軸の大きさを応答する。
     * @return XYZ軸の大きさ
     */
    public double axesScale()
    {
        return this.axesScale;
    }

    /**
     * XYZ軸の大きさを設定する。
     * @param scale XYZ軸の大きさ
     */
    public void axesScale(double scale)
    {
         this.axesScale = scale;

        return;
    }

    /**
     * ディスプレイリストを応答する。
     * @return ディスプレイリスト
     */
    public int displayList()
    {
        if (this.displayList == 0)
        {
            GL2 gl = this.view.gl();
            GLU glu = this.view.glu();
            GLUT glut = this.view.glut();

            this.displayList = gl.glGenLists(1);
            gl.glNewList(this.displayList, GL2.GL_COMPILE);
            this.displayObject.rendering(gl, glu, glut);
            gl.glEndList();
        }

        return this.displayList;
    }

    /**
     * OpenGLのウィンドウを開く。
     */
    public void open()
    {
        this.open(-1, -1);

        return;
    }

    /**
     * OpenGLのウィンドウを指定された場所(x, y)に開く。
     * @param x ウィンドウを開く場所のx座標
     * @param y ウィンドウを開く場所のy座標
     */
    public void open(int x, int y)
    {
        OpenGLView aView = this.view;
        OpenGLController aController = aView.controller();

        // OpenGL描画のためのキャンバスを生成する。
        GLCanvas aCanvas = this.view.canvas();
        aCanvas.addGLEventListener(aView);
        aCanvas.addKeyListener(aController);
        aCanvas.addMouseListener(aController);
        aCanvas.addMouseMotionListener(aController);
        aCanvas.setFocusable(true);

        // フレームを生成し、上記のキャンバスを乗せて、ウィンドウとして開く。
        Frame aFrame = new Frame(this.windowTitle());
        aFrame.add(aCanvas);
        aFrame.addNotify();
        int titleBarHeight = aFrame.getInsets().top;
        aFrame.setSize(400, 400 + titleBarHeight);
        if (x &lt; 0 &amp;&amp; y &lt; 0)
        {
            aFrame.setLocationRelativeTo(null);
        }
        else
        {
            aFrame.setLocation(x, y);
        }
        aFrame.addWindowListener(aController);
        aFrame.setFocusable(false);
        aFrame.setVisible(true);

        return;
    }

    /**
     * プロジェクションを応答する。
     * @return プロジェクション
     */
    public OpenGLProjection projection()
    {
        return this.projection;
    }

    /**
     * レンダリング（描画）する。
     */
    public void rendering()
    {
        GL2 gl = this.view.gl();

        gl.glCallList(this.displayList());

        return;
    }

    /**
     * ウィンドウタイトルを応答する。
     * @return ウィンドウタイトル
     */
    public String windowTitle()
    {
        return this.windowTitle;
    }

    /**
     * ウィンドウタイトルを設定する。
     * @param title ウィンドウタイトル
     */
    public void windowTitle(String title)
    {
        this.windowTitle = title;

        return;
    }
}
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLObject">mvc4jogl.OpenGLObject</a><span style="font-size: x-small;">（<a href="version3.html#mvc4jogl_OpenGLObject"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLPolygon">mvc4jogl.OpenGLPolygon</a><span style="font-size: x-small;">（<a href="version3.html#mvc4jogl_OpenGLPolygon"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLProjection">mvc4jogl.OpenGLProjection</a><span style="font-size: x-small;">（<a href="version4.html#mvc4jogl_OpenGLProjection"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLTriangle">mvc4jogl.OpenGLTriangle</a><span style="font-size: x-small;">（<a href="version3.html#mvc4jogl_OpenGLTriangle"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_OpenGLView">mvc4jogl.OpenGLView</a><span style="font-size: x-small;">（<a href="version7.html#mvc4jogl_OpenGLView"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<blockquote>
<div class="belt-yellow">
<h4><a name="mvc4jogl_Teapot">mvc4jogl.Teapot</a><span style="font-size: x-small;">（<a href="version3.html#mvc4jogl_Teapot"><span style="color:#0000ff">以前に示したもの</span></a>と同様ゆえに省略）</span></h4>
</div>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
…
</pre>
</blockquote>
<!--********************************************************************************************************************-->
<div class="belt">
<h3><a name="BuildAndResult">ビルド＆実行結果</a>（Version 8）</h3>
</div>
<p>では、実行してみましょう。コントローラの修正箇所から、どのキーがどの機能に対応しているかがわかると思います。試してみてください。</p>
<blockquote>
<pre>
$ <span style="color:#ff0000">make test</span>
env LC_ALL=ja_JP.UTF-8 ant test
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Buildfile: /Users/aoki/Developments/Languages/Java/Dragon/Version8/build.xml

prepare:
     [exec] 2019年 12月27日 金曜日 19時38分32秒 JST

compile:
    [javac] Compiling 11 source files to /Users/aoki/Developments/Languages/Java/Dragon/Version8/Classes
    [javac] Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
     [exec] 2019年 12月27日 金曜日 19時38分34秒 JST

jar:
      [jar] Building jar: /Users/aoki/Developments/Languages/Java/Dragon/Version8/dragon.jar
      [jar] Building jar: /Users/aoki/Developments/Languages/Java/Dragon/Version8/dragon-natives-macosx-universal.jar
     [exec] 2019年 12月27日 金曜日 19時38分35秒 JST

all:
     [exec] 2019年 12月27日 金曜日 19時38分36秒 JST

test:
     [exec] Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
     [exec] 2019年 12月27日 金曜日 19時38分44秒 JST

BUILD SUCCESSFUL
Total time: 12 seconds
$ 
</pre>
</blockquote>
<blockquote>
  <img src="images/version_8_R.jpg" width="402" height="424" alt="version_8_R">
  <img src="images/version_8_S.jpg" width="402" height="424" alt="version_8_S"><br>
  <img src="images/version_8_T.jpg" width="402" height="424" alt="version_8_T">
  <img src="images/version_8_U.jpg" width="402" height="424" alt="version_8_U">
</blockquote>
<!--********************************************************************************************************************-->
<hr>
<p><a href="version7.html">←</a> <a href="version8.html">↑</a> <a href="version9.html">→</a></p>
<hr>
<div class="right-small">Updated: 2019/12/28 (Created: 2010/11/11) <a href="http://www.kyoto-su.ac.jp/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/KSU.jpg" width="115" height="30" alt="KSU"></a> <a href="http://www.cc.kyoto-su.ac.jp/~atsushi/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/AokiHanko.jpg" width="32" height="32" alt="AokiHanko"></a></div>
</body>
</html>
