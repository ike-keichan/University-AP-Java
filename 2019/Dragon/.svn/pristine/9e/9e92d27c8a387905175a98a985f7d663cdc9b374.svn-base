<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta name="keywords" content="Aoki,Atsushi,Smalltalk,Smalltalker,Program,Programmer,Object,Oriented,Programming">
<meta name="description" content="青木淳（あおきあつし）のホームページ">
<meta name="author" content="AOKI Atsushi">
<link rev="made" href="mailto:atsushi@cc.kyoto-su.ac.jp">
<link rel="index" href="index-j.html">
<link rel="shortcut icon" href="http://www.cc.kyoto-su.ac.jp/~atsushi/icons/aoki.ico">
<style type="text/css">
<!--
body {
  background-color : #ffffff;
  margin : 20px;
  padding : 10px;
  font-family : serif;
  font-size : 10pt;
}
a {
  text-decoration : underline;
  color : #000000;
}
a:link {
  background-color : #ffddbb;
}
a:visited {
  background-color : #ccffcc;
}
a:hover {
  background-color : #dddddd;
}
a:active {
  background-color : #dddddd;
}
div.belt {
  background-color : #eeeeee;
  padding : 0px 4px;
}
div.belt-yellow {
  background-color : #ffffcc;
  padding : 0px 4px;
}
div.belt-blue {
  background-color : #ddeeff;
  padding : 0px 4px;
}
div.belt-pink {
  background-color : #ffeedd;
  padding : 0px 4px;
}
div.right-small {
  text-align : right;
  font-size : 8pt;
}
img.border {
  border-width : 1px;
  border-color : #000000;
  vertical-align : middle;
}
img.borderless {
  border-width : 0px;
  vertical-align : middle;
}
p.belt {
  background-color : #ffeedd;
  padding : 4px 8px;
}
p.belt-blue {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt-yellow {
  background-color : #ffffcc;
  padding : 4px 8px;
}
table {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
}
table.profile {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
  margin-top : 8px;
  margin-left : 8px;
  margin-right : 8px;
  margin-bottom : 8px;
}
table.belt {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  background-color : #ffeedd;
  padding : 0px 0px;
  width : 100%;
}
table.content {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
}
table.font-fixed {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
  font-family : monospace;
}
table.nest {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 0px 0px;
}
td {
  padding : 0px 0px;
  vertical-align : middle;
}
td.center {
  text-align : center;
}
td.center-half {
  text-align : center;
  width : 50%;
  font-size : 8pt;
}
td.center-small {
  text-align : center;
  font-size : 8pt;
  padding : 0px 4px;
}
td.center-small-nopadding {
  text-align : center;
  font-size : 8pt;
  padding : 0px 0px;
}
td.center-white {
  text-align : center;
  background-color : #ffffff;
}
td.center-small-white {
  text-align : center;
  font-size : 8pt;
  background-color : #ffffff;
}
td.center-border1 {
  text-align : center;
  vertical-align : middle;
  empty-cells : show;
  border-style : solid;
  border-width : 1px;
  border-color : #ffc080;
  width : 22px;
  height : 22px;
}
td.left-small {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
}
td.left-small-white {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
td.right-small {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
}
td.right-small-white {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
th {
  padding : 0px 0px;
  vertical-align : middle;
}
#menu {
  margin: 0px 0px 0px 0px;
  padding: 0px;
  height: 32px;
}
#menu ul {
  margin: 0px;
  padding: 0px;
  list-style: none;
  text-align: center;
  clear: both;
}
#menu li {
  margin: 0px 5px 0px 0px;
  padding: 0px;
  float: left;
}
#menu a {
  display: block;
  padding: 2px 4px;
  text-decoration: none;
  margin: 0px;
  font-weight: bold;
  background: #FFFFFF;
  color: #333333;
  border: 1px solid #666666;
}
#menu a:hover {
  display: block;
  padding: 2px 4px;
  border-bottom: 1px solid #000000;
  text-decoration: none;
  background: #FFCC66;
}
#menu .current {
  background-color: #F45F57;
  font-weight: bold;
  color: #FFFFFF;
  border: 1px solid #333333;
}
-->
</style>
<!-- SyntaxHighlighter BEGIN -->
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shCore.css" rel="stylesheet" type="text/css">
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shThemeEclipse.css" rel="stylesheet" type="text/css">
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shCore.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushJava.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPlain.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPython.js" type="text/javascript"></script>
<script type="text/javascript"> 
<!--
SyntaxHighlighter.config.bloggerMode = true;
SyntaxHighlighter.config.clipboardSwf = 'http://alexgorbatchev.com/pub/sh/current/scripts/clipboard.swf';
SyntaxHighlighter.all();
SyntaxHighlighter.defaults['auto-links'] = false;
-->
</script>
<!-- SyntaxHighlighter END -->
<title>ドラゴン</title>
</head>
<body>
<div id="menu">
<ul>
  <li><a href="../Lectures/index-j.html#Dragon">Javaプログラム集</a></li>
  <li><a href="index-j.html" class="current">ドラゴン</a></li>
</ul>
</div>
<hr>
<h2>ドラゴン</h2>
<p>JOGLのためのMVC「<a href="mvc4jogl/JavaDoc/index.html">mvc4jogl.jar</a>」とユーティリテ「<a href="utility/JavaDoc/index.html">utility.jar</a>」を用いて、ドラゴンのレンダリング（描画）を行ってみましょう。ここで用いる「<a href="mvc4jogl/JavaDoc/index.html" title="uppercase">MVC4JOGL</a>」は「<a href="../TryJOGL/index-j.html">TryJOGL</a>」よりも進化しています。描画だけでなく、マウスやキーボードを用いて、回転や拡大縮小ができるようになっているのです。また「<a href="utility/JavaDoc/index.html" title="uppercase">Utility</a>」は文字列を分割したり、URLを介してインターネット上にあるファイルをアクセスしたり、かなり便利な機能を提供してくれます。これらを駆使してプログラムを仕上げると、以下の完成図のようになります。XYZ軸を赤緑青の線で描き、その中央にドラゴンを描き出します。</p>
<div class="belt">
<h3><a name="Completion">完成図</a></h3>
</div>
<blockquote><a href="http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/Dragon/dragon.txt">dragon.txt</a><br><img src="images/DragonResult.png" width="514" height="536" alt="DragonResult"><br>
　　　　　視点 = [-5.5852450791872 , 3.07847342734 , 15.794105252496]<br>
　　　　注視点 = [0.27455347776413 , 0.20096999406815 , -0.11261999607086]<br>
上方向ベクトル = [0.1018574904194 , 0.98480906061847 , -0.14062775604137]<br>
　　　　視界角 = 12.642721790235</blockquote>
<div class="belt">
<h3><a name="Improvement">TryJOGLからMVC4JOGLへ</a></h3>
</div>
<p>なお、MVCフレームワーク（デザインパターン）として進化した「MVC4JOGL」は、前章の「TryJOGL」から発展したものです。その開発過程（プロセス）は「<a href="../DragonProgrammingProcess/index-j.html">ドラゴンのプログラミング過程とリファクタリング過程</a>」を参照してください。</p>
<p>ここでは、jarファイルとして提供されている他のプログラム「<a href="mvc4jogl/JavaDoc/index.html" title="jar">mvc4jogl.jar</a>」と「<a href="utility/JavaDoc/index.html" title="jar">utility.jar</a>」を利用して、新たなプログラムを作り出すことを、しっかりと学んでください。</p>
<p>加えて、自らが作ったJavaプログラム群を、jarファイルにまとめて提供できれば、他の方々（Javaプログラマたち）にパッケージを（ライブラリとして）利用してもらえるのだ、ということも学んでいただきたい、しっかりと。</p>
<div class="belt">
<h3><a name="Checkout">チェックアウト</a></h3>
</div>
<p>まず、基（ベース）となるプログラムをリポジトリからチェックアウトして入手してください。</p>
<blockquote>
<pre>
$ <span style="color:#ff0000">mkdir -p ~/AP/Java/Dragon/</span>
$ <span style="color:#ff0000">cd ~/AP/Java/Dragon/</span>
$ <span style="color:#ff0000">svn checkout --username student http://bluetree.kyoto-su.ac.jp/repositories/AP/Java/Dragon/Dragon_Problem/</span>
A    Dragon_Problem/dragon
A    Dragon_Problem/Dragon.app
A    Dragon_Problem/Dragon.app/Contents
A    Dragon_Problem/Dragon.app/Contents/MacOS
A    Dragon_Problem/Dragon.app/Contents/Resources
A    Dragon_Problem/Dragon.app/Contents/Resources/Scripts
A    Dragon_Problem/Dragon.app/Contents/Resources/description.rtfd
A    Dragon_Problem/dragon/Dragon.java
A    Dragon_Problem/dragon/Example.java
A    Dragon_Problem/Dragon.app/Contents/Info.plist
A    Dragon_Problem/Dragon.app/Contents/MacOS/applet
A    Dragon_Problem/Dragon.app/Contents/PkgInfo
A    Dragon_Problem/Dragon.app/Contents/Resources/JavaApp.icns
A    Dragon_Problem/Dragon.app/Contents/Resources/Scripts/main.scpt
A    Dragon_Problem/Dragon.app/Contents/Resources/applet.icns
A    Dragon_Problem/Dragon.app/Contents/Resources/applet.rsrc
A    Dragon_Problem/Dragon.app/Contents/Resources/description.rtfd/TXT.rtf
A    Dragon_Problem/Makefile
A    Dragon_Problem/PrepareJavaNativeInterfaceLibraries.sh
A    Dragon_Problem/build.xml
A    Dragon_Problem/dragon.mf
A    Dragon_Problem/mvc4jogl-natives-macosx-universal.jar
A    Dragon_Problem/mvc4jogl.jar
A    Dragon_Problem/utility.jar
Checked out revision 2775.
$ 
</pre>
</blockquote>
<p>以下に「dragon」というパッケージを表しているディレクトリの中に収められた2つのプログラム「Dragon」と「Example」のソースコードを記しておきます。これらをよく読み、当該の「Dragon」の中の赤字の部分を作り、上記の完成図と同じになるようにしてください。おきばりやしとくれやす！（<a href="http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/Dragon/dragon.pdf">ヒント</a>）</p>
<div class="belt">
<h3><a name="Dragon">Dragon</a>（ソースプログラム）</h3>
</div>
<blockquote>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
package dragon;

import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.util.gl2.GLUT;

import java.util.Iterator;
import java.util.List;

import mvc4jogl.OpenGLCompound;
import mvc4jogl.OpenGLModel;
import mvc4jogl.OpenGLObject;
import mvc4jogl.OpenGLProjection;
import mvc4jogl.OpenGLTriangle;

import utility.StringUtility;

/**
 * &lt;a href="http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/Java/Dragon/"&gt;ドラゴン&lt;/a&gt;（描画オブジェクト）である。
 */
public class Dragon extends OpenGLCompound
{
    /**
     * ドラゴンのコンストラクタである。
     * &lt;a href="http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/Dragon/dragon.txt"&gt;dragon.txt&lt;/a&gt;からデータを読み取って立体（描画オブジェクト）を生成する。
     */
    public Dragon()
    {
        super();

        String urlString = "http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/Dragon/dragon.txt";
        List&lt;String&gt; aCollection = StringUtility.readTextFromURL(urlString);
        int numberOfVertexes = 0;
        int numberOfTriangles = 0;
        Iterator&lt;String&gt; anIterator = aCollection.iterator();
        while (anIterator.hasNext())
        {
            String aString = anIterator.next();
            List&lt;String&gt; aList = StringUtility.splitString(aString, " \t\n\r");
            if (aList.size() == 0) { continue; }
            System.out.println(aList);
            /*****
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             * このコメントになっている部分（約40行）をプログラミングするとドラゴンが出現します。
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
             *
            *****/
        }

        return;
    }

    /**
     * ドラゴンを生成してウィンドウを開く。
     * @param arguments コマンドの引数列（文字列の配列）
     */
    public static void main(String[] arguments)
    {
        Dragon.open(150, 150);
    }

    /**
     * ドラゴンを生成してウィンドウを開く。
     * @param x ウィンドウを開く場所のx座標
     * @param y ウィンドウを開く場所のy座標
     */
    public static void open(int x, int y)
    {
        // 描画オブジェクトを生成する。
        OpenGLObject aDragon = new Dragon();

        // モデルに描画オブジェクトを指定してウィンドウを開く。
        OpenGLModel aModel = new OpenGLModel(aDragon);
        aModel.axesScale(1.0d);
        aModel.windowTitle("Dragon");
        OpenGLProjection aProjection = aModel.projection();
        aProjection.eyePoint(-5.5852450791872d, 3.07847342734d, 15.794105252496d);
        aProjection.sightPoint(0.27455347776413d, 0.20096999406815d, -0.11261999607086d);
        aProjection.upVector(0.1018574904194d, 0.98480906061847d, -0.14062775604137d);
        aProjection.fovy(12.642721790235d);
        aModel.open(x, y);

        return;
    }
}
</pre>
</blockquote>
<div class="belt">
<h3><a name="Example">Example</a>（ソースプログラム）</h3>
</div>
<blockquote>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [];">
package dragon;

/**
 * ドラゴンをOpenGLでレンダリング（描画）するプログラムである。
 * JOGL（Java bindings for OpenGL）の例題プログラムである。
 * OpenGLを使ったJavaによる三次元グラフィックスの初歩的な練習になる。
 * オブザーバ・デザインパターン（MVC: Model-View-Controller）を用いた典型的（模範的）なプログラムである。
 */
public class Example extends Object
{
    /**
     * OpenGLオブジェクトからOpenGLモデルを生成してウィンドウを開く。
     * @param arguments コマンドの引数列（文字列の配列）
     */
    public static void main(String[] arguments)
    {
        int x = 100;
        int y = 100;

        // ドラゴンを生成してウィンドウを開く。
        Dragon.open(x += 25, y += 25);

        return;
    }
}
</pre>
</blockquote>
<div class="belt">
<h3><a name="Result">実行結果</a></h3>
</div>
<p>「Dragon」の中の赤字の部分を作っていない場合には、標準出力にドラゴンのファイルの内容が1行ごとに字句に分割されて書き出された後、XYZ軸だけが描き出されるウィンドウが1枚開きます。</p>
<blockquote><img src="images/DragonBefore.jpg" width="402" height="424" alt="DragonBefore"></blockquote>
<p>「Dragon」の中の赤字の部分（コメントになっているところの約40行ほどのプログラム）を作成すれば、ドラゴンを描画することができます。</p>
<blockquote><img src="images/DragonAfter.jpg" width="402" height="424" alt="DragonAfter"></blockquote>
<p>Javaドキュメント（javadoc）とアプリケーションを示しておきます。</p>
<blockquote><a href="JavaDoc/index.html"><img src="images/JavaDoc.png" width="667" height="461" alt="JavaDoc"></a></blockquote>
<blockquote><a href="http://www.cc.kyoto-su.ac.jp/~atsushi/deployment/AP/Java/Dragon.app.tar.gz"><img src="images/DragonApp.jpg" width="256" height="256" alt="DragonApp"></a></blockquote>
<blockquote>
<pre>
$ <span style="color:#ff0000">(cd ~/Downloads/ ; curl -O http://www.cc.kyoto-su.ac.jp/~atsushi/deployment/AP/Java/Dragon.app.tar.gz)</span> <span style="font-size: x-small; color:#00ff00"># まず、アーカイブファイルをダウンロード</span>
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 4207k  100 4207k    0     0  3212k      0  0:00:01  0:00:01 --:--:-- 3212k
$ <span style="color:#ff0000">(cd ~/Downloads/ ; cat ./Dragon.app.tar.gz ; rm -f ./Dragon.app.tar.gz) | (cd ~/Desktop/ ; tar xvfz -)</span> <span style="font-size: x-small; color:#00ff00"># 次に、アーカイブファイルを展開して、デスクトップ上にアプリケーションを配置</span>
x ./Dragon.app/
x ./Dragon.app/Contents/
x ./Dragon.app/Contents/MacOS/
x ./Dragon.app/Contents/Resources/
x ./Dragon.app/Contents/Info.plist
x ./Dragon.app/Contents/PkgInfo
x ./Dragon.app/Contents/Resources/JavaApp.icns
x ./Dragon.app/Contents/Resources/applet.rsrc
x ./Dragon.app/Contents/Resources/description.rtfd/
x ./Dragon.app/Contents/Resources/Java/
x ./Dragon.app/Contents/Resources/Scripts/
x ./Dragon.app/Contents/Resources/applet.icns
x ./Dragon.app/Contents/Resources/Scripts/main.scpt
x ./Dragon.app/Contents/Resources/Java/dragon-natives-macosx-universal.jar
x ./Dragon.app/Contents/Resources/Java/dragon.jar
x ./Dragon.app/Contents/Resources/Java/natives/
x ./Dragon.app/Contents/Resources/Java/natives/macosx-universal/
x ./Dragon.app/Contents/Resources/Java/natives/macosx-universal/libnativewindow_awt.dylib
x ./Dragon.app/Contents/Resources/Java/natives/macosx-universal/libgluegen_rt.dylib
x ./Dragon.app/Contents/Resources/Java/natives/macosx-universal/libnativewindow_macosx.dylib
x ./Dragon.app/Contents/Resources/Java/natives/macosx-universal/libjogl_mobile.dylib
x ./Dragon.app/Contents/Resources/Java/natives/macosx-universal/libnewt_head.dylib
x ./Dragon.app/Contents/Resources/Java/natives/macosx-universal/libjogl_desktop.dylib
x ./Dragon.app/Contents/Resources/description.rtfd/TXT.rtf
x ./Dragon.app/Contents/MacOS/applet
$ <span style="color:#ff0000">(cd ~/Desktop/ ; xattr -cr ./Dragon.app)</span> <span style="font-size: x-small; color:#00ff00"># そして、アプリケーションの拡張属性を再帰的にクリア</span>
$ <span style="color:#ff0000">(cd ~/Desktop/ ; sudo spctl --master-disable ; open ./Dragon.app ; sudo spctl --master-enable)</span> <span style="font-size: x-small; color:#00ff00"># openコマンドで起動、ただし、Gatekeeperを開け閉めしながら、または、TryJOGL.appをダブルクリック</span>
Password: <span style="font-size: x-small; color:#00ff00"># 管理者のパスワードを入力、Gatekeeperの開閉のために</span>
$ 
</pre>
</blockquote>
<hr>
<div class="right-small">Updated: 2020/01/04 (Created: 2010/11/11) <a href="http://www.kyoto-su.ac.jp/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/KSU.jpg" width="115" height="30" alt="KSU"></a> <a href="http://www.cc.kyoto-su.ac.jp/~atsushi/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/AokiHanko.jpg" width="32" height="32" alt="AokiHanko"></a></div>
</body>
</html>
