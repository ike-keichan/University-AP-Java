<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta name="keywords" content="Aoki,Atsushi,Smalltalk,Smalltalker,Program,Programmer,Object,Oriented,Programming">
<meta name="description" content="青木淳（あおきあつし）のホームページ">
<meta name="author" content="AOKI Atsushi">
<link rev="made" href="mailto:atsushi@cc.kyoto-su.ac.jp">
<link rel="index" href="index-j.html">
<link rel="shortcut icon" href="http://www.cc.kyoto-su.ac.jp/~atsushi/icons/aoki.ico">
<style type="text/css">
<!--
body {
  background-color : #ffffff;
  margin : 20px;
  padding : 10px;
  font-family : serif;
  font-size : 10pt;
}
a {
  text-decoration : underline;
  color : #000000;
}
a:link {
  background-color : #ffddbb;
}
a:visited {
  background-color : #ccffcc;
}
a:hover {
  background-color : #dddddd;
}
a:active {
  background-color : #dddddd;
}
div.belt {
  background-color : #eeeeee;
  padding : 0px 4px;
}
div.belt-yellow {
  background-color : #ffffcc;
  padding : 0px 4px;
}
div.belt-blue {
  background-color : #ddeeff;
  padding : 0px 4px;
}
div.belt-pink {
  background-color : #ffeedd;
  padding : 0px 4px;
}
div.right-small {
  text-align : right;
  font-size : 8pt;
}
img.border {
  border-width : 1px;
  border-color : #000000;
  vertical-align : middle;
}
img.borderless {
  border-width : 0px;
  vertical-align : middle;
}
p.belt {
  background-color : #ffeedd;
  padding : 4px 8px;
}
p.belt-blue {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt-yellow {
  background-color : #ffffcc;
  padding : 4px 8px;
}
table {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
}
table.profile {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
  margin-top : 8px;
  margin-left : 8px;
  margin-right : 8px;
  margin-bottom : 8px;
}
table.belt {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  background-color : #ffeedd;
  padding : 0px 0px;
  width : 100%;
}
table.content {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
}
table.font-fixed {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
  font-family : monospace;
}
table.nest {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 0px 0px;
}
td {
  padding : 0px 0px;
  vertical-align : middle;
}
td.center {
  text-align : center;
}
td.center-half {
  text-align : center;
  width : 50%;
  font-size : 8pt;
}
td.center-small {
  text-align : center;
  font-size : 8pt;
  padding : 0px 4px;
}
td.center-small-nopadding {
  text-align : center;
  font-size : 8pt;
  padding : 0px 0px;
}
td.center-white {
  text-align : center;
  background-color : #ffffff;
}
td.center-small-white {
  text-align : center;
  font-size : 8pt;
  background-color : #ffffff;
}
td.center-border1 {
  text-align : center;
  vertical-align : middle;
  empty-cells : show;
  border-style : solid;
  border-width : 1px;
  border-color : #ffc080;
  width : 22px;
  height : 22px;
}
td.left-small {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
}
td.left-small-white {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
td.right-small {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
}
td.right-small-white {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
th {
  padding : 0px 0px;
  vertical-align : middle;
}
#menu {
  margin: 0px 0px 0px 0px;
  padding: 0px;
  height: 32px;
}
#menu ul {
  margin: 0px;
  padding: 0px;
  list-style: none;
  text-align: center;
  clear: both;
}
#menu li {
  margin: 0px 5px 0px 0px;
  padding: 0px;
  float: left;
}
#menu a {
  display: block;
  padding: 2px 4px;
  text-decoration: none;
  margin: 0px;
  font-weight: bold;
  background: #FFFFFF;
  color: #333333;
  border: 1px solid #666666;
}
#menu a:hover {
  display: block;
  padding: 2px 4px;
  border-bottom: 1px solid #000000;
  text-decoration: none;
  background: #FFCC66;
}
#menu .current {
  background-color: #F45F57;
  font-weight: bold;
  color: #FFFFFF;
  border: 1px solid #333333;
}
-->
</style>
<!-- SyntaxHighlighter BEGIN -->
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shCore.css" rel="stylesheet" type="text/css">
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shThemeEclipse.css" rel="stylesheet" type="text/css">
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shCore.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushJava.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPlain.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPython.js" type="text/javascript"></script>
<script type="text/javascript"> 
<!--
SyntaxHighlighter.config.bloggerMode = true;
SyntaxHighlighter.config.clipboardSwf = 'http://alexgorbatchev.com/pub/sh/current/scripts/clipboard.swf';
SyntaxHighlighter.all();
SyntaxHighlighter.defaults['auto-links'] = false;
-->
</script>
<!-- SyntaxHighlighter END -->
<title>Version 3：OpenGLのイベントリスナーの枠組みを実装する</title>
</head>
<body>
<div id="menu">
<ul>
  <li><a href="../Lectures/index-j.html#TryJOGL">Javaプログラム集</a></li>
  <li><a href="index-j.html">TryJODL</a></li>
  <li><a href="version0.html">0</a></li>
  <li><a href="version1.html">1</a></li>
  <li><a href="version2.html">2</a></li>
  <li><a href="version3.html" class="current">3</a></li>
  <li><a href="version4.html">4</a></li>
  <li><a href="version5.html">5</a></li>
  <li><a href="version6.html">6</a></li>
  <li><a href="version7.html">7</a></li>
  <li><a href="version8.html">8</a></li>
  <li><a href="version9.html">9</a></li>
</ul>
</div>
<hr>
<h2>Version 3：OpenGLのイベントリスナーの枠組みを実装する</h2>
<p>JOGLを利用するにあたって今回はとても重要です。OpenGLのイベントリスナー「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/GLEventListener.html">GLEventListener</a>」のインターフェースを実装するからです。「Version 2」を「Version 3」にしましょう。「tryjogl」ディレクトリ（パッケージ）にある「Example.java」の中身を、以下のソースコードと同じになるように直してください。編集するところをハイライトで表しておきます。</p>
<div class="belt">
<h3><a name="SourceCode">ソースコード</a>（Version 3）</h3>
</div>
<blockquote>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [4, 6, 18, 32, 49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108];">
package tryjogl;

import com.jogamp.opengl.awt.GLCanvas;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLProfile;

import javax.swing.JFrame;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * JOGL（Java bindings for OpenGL）の例題プログラムである。
 * OpenGLを使ったJavaによる三次元グラフィックスの初歩的な練習になる。
 */
public class Example extends WindowAdapter implements GLEventListener
{
    /**
     * Exampleのコンストラクタである。
     */
    public Example()
    {
        System.out.println("Example");

        // OpenGL描画のためのキャンバスを生成する。
        GLProfile profile = GLProfile.get(GLProfile.GL2);
        GLCapabilities capabilities = new GLCapabilities(profile);
        capabilities.setDoubleBuffered(true);
        GLCanvas aCanvas = new GLCanvas(capabilities);
        aCanvas.addGLEventListener(this);

        // フレームを生成し、上記のキャンバスを乗せて、ウィンドウとして開く。
        JFrame aFrame = new JFrame("Wire Teapot");
        aFrame.add(aCanvas);
        aFrame.addNotify();
        int titleBarHeight = aFrame.getInsets().top;
        aFrame.setSize(400, 400 + titleBarHeight);
        aFrame.setLocationRelativeTo(null);
        // aFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        aFrame.addWindowListener(this);
        aFrame.setFocusable(false);
        aFrame.setVisible(true);

        return;
    }

    /**
     * OpenGL起動時に初期化のために呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     */
    public void init(GLAutoDrawable aDrawable)
    {
        System.out.println("init");

        return;
    }

    /**
     * OpenGL描画を行う際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     */
    public void display(GLAutoDrawable aDrawable)
    {
        System.out.println("display");

        return;
    }

    /**
     * OpenGL表示モードや表示デバイスが変更された際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     * @param modeChanged 表示モードが変更されたか否か
     * @param deviceChanged 表示デバイスが変更されたか否か
     */
    public void displayChanged(GLAutoDrawable aDrawable, boolean modeChanged, boolean deviceChanged)
    {
        System.out.println("displayChanged");

        return;
    }

    /**
     * OpenGLの資源が破棄された際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     */
    public void dispose(GLAutoDrawable aDrawable)
    {
        System.out.println("dispose");

        return;
    }

    /**
     * OpenGL表示領域が変更された際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     * @param x 表示領域のX座標
     * @param y 表示領域のY座標
     * @param w 表示領域の幅
     * @param h 表示領域の高さ
     */
    public void reshape(GLAutoDrawable aDrawable, int x, int y, int w, int h)
    {
        System.out.println("reshape");

        return;
    }

    /**
     * ウィンドウを閉じようとした時に呼び出される。
     * @param aWindowEvent ウィンドウイベント
     */
    public void windowClosing(WindowEvent aWindowEvent)
    {
        // System.out.println(aWindowEvent.paramString());

        // 終了する。
        System.exit(0);

        return;
    }

    /**
     * 針金細工のティーポット（Wire Teapot）を描くOpenGLのウィンドウを開く。
     * @param arguments コマンドの引数列（文字列の配列）
     */
    public static void main(String[] arguments)
    {
        System.out.println("main");

        new Example();

        return;
    }
}
</pre>
</blockquote>
<div class="belt">
<h3><a name="Explanation">プログラムの解説</a></h3>
</div>
<p>OpenGLのイベントリスナー「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/GLEventListener.html">GLEventListener</a>」のインターフェースを実装するために、その仕様（<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/GLEventListener.html#method_summary" title="document">JavaDoc＝ドキュメント</a>）を確認すると、4つのメソッド「init(…)」「display(…)」「dispose(…)」「reshape(…)」を実装しなければならないことがわかります。JOGLのバージョンが1のときには、「dispose(…)」がなく、「displayChanged(…)」がありました。バックワードコンパチビリティ（過去への互換性）を確保するためにも、一応「displayChanged(…)」も実装することにしましょう。したがって、以下の計5つのメソッドを新たに実装することになります。</p>
<ol>
  <li>void init(GLAutoDrawable)</li>
  <li>void display(GLAutoDrawable)</li>
  <li>void displayChanged(GLAutoDrawable, boolean, boolean)</li>
  <li>void dispose(GLAutoDrawable)</li>
  <li>void reshape(GLAutoDrawable, int, int, int, int)</li>
</ol>
<p>まず、GLイベントリスナー「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/GLEventListener.html">GLEventListener</a>」とGLオートドローアブル「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/GLAutoDrawable.html">GLAutoDrawable</a>」をインポートします。GLオートドローアブルは、実装すべき4つ（5つ）のメソッドの引数として入って来るオブジェクトであり、OpenGLによるレンダリング（描画）の抽象オブジェクト（レンダリングコンテクスト＝描画文脈につながっているもの＝描画ターゲットと呼ばれることもあります）になります。</p>
<p>そして、当該のExampleクラスの宣言（定義）において、GLイベントリスナーを実装する「implements GLEventListener」と付け加えます。さらに、GLキャンバスのイベントリスナーとして自分自身（当該のExampleクラスのインスタンス）を「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/awt/GLCanvas.html#addGLEventListener(javax.media.opengl.GLEventListener)">addGLEventListener(GLEventListener)</a>」を引数にして追加することを伝えます。</p>
<p>あとは、4つ（5つ）のメソッドを実装するだけです。いずれもvoid（何も応答しない）メソッドなので、メソッドの名前を標準出力に書き出すだけの処理にして、枠組みだけ（何もしないこと）にします。次回（次のバージョン）から順々に「init(…)」「reshape(…)」「display(…)」を実装してゆきましょう。</p>
<div class="belt">
<h3><a name="BuildAndResult">ビルド＆実行結果</a>（Version 3）</h3>
</div>
<p>では、ビルドして実行してみましょう。「main」「Example」と標準出力に書き出された後、「init」「reshape」「display」「display」と続き、ウィンドウを閉じれば、その直後に「dispose」と出力されます。当該のExampleクラスのインスタンスがGLイベントリスナーとして正常に動き出した証拠です。</p>
<blockquote>
<pre>
$ <span style="color:#ff0000">make test</span>
env LC_ALL=ja_JP.UTF-8 ant test
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Buildfile: /Users/aoki/Desktop/Version3/build.xml

prepare:
     [exec] 2019年 12月20日 金曜日 06時39分46秒 JST

compile:
    [javac] Compiling 1 source file to /Users/aoki/Desktop/Version3/Classes
    [javac] Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
     [exec] 2019年 12月20日 金曜日 06時39分48秒 JST

jar:
      [jar] Building jar: /Users/aoki/Desktop/Version3/tryjogl.jar
      [jar] Building jar: /Users/aoki/Desktop/Version3/tryjogl-natives-macosx-universal.jar
     [exec] 2019年 12月20日 金曜日 06時39分49秒 JST

all:
     [exec] 2019年 12月20日 金曜日 06時39分49秒 JST

test:
     [exec] Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
     [exec] main
     [exec] Example
     [exec] init
     [exec] reshape
     [exec] display
     [exec] display
     [exec] dispose
     [exec] 2019年 12月20日 金曜日 06時39分54秒 JST

BUILD SUCCESSFUL
Total time: 8 seconds
$ 
</pre>
</blockquote>
<blockquote><img src="images/version_3_1.jpg" width="402" height="424" alt="version_3_1"></blockquote>
<hr>
<p><a href="version2.html">←</a> <a href="version3.html">↑</a> <a href="version4.html">→</a></p>
<hr>
<div class="right-small">Updated: 2019/12/20 (Created: 2010/11/11) <a href="http://www.kyoto-su.ac.jp/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/KSU.jpg" width="115" height="30" alt="KSU"></a> <a href="http://www.cc.kyoto-su.ac.jp/~atsushi/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/AokiHanko.jpg" width="32" height="32" alt="AokiHanko"></a></div>
</body>
</html>
