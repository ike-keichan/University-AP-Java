<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta name="keywords" content="Aoki,Atsushi,Smalltalk,Smalltalker,Program,Programmer,Object,Oriented,Programming">
<meta name="description" content="青木淳（あおきあつし）のホームページ">
<meta name="author" content="AOKI Atsushi">
<link rev="made" href="mailto:atsushi@cc.kyoto-su.ac.jp">
<link rel="index" href="index-j.html">
<link rel="shortcut icon" href="http://www.cc.kyoto-su.ac.jp/~atsushi/icons/aoki.ico">
<style type="text/css">
<!--
body {
  background-color : #ffffff;
  margin : 20px;
  padding : 10px;
  font-family : serif;
  font-size : 10pt;
}
a {
  text-decoration : underline;
  color : #000000;
}
a:link {
  background-color : #ffddbb;
}
a:visited {
  background-color : #ccffcc;
}
a:hover {
  background-color : #dddddd;
}
a:active {
  background-color : #dddddd;
}
div.belt {
  background-color : #eeeeee;
  padding : 0px 4px;
}
div.belt-yellow {
  background-color : #ffffcc;
  padding : 0px 4px;
}
div.belt-blue {
  background-color : #ddeeff;
  padding : 0px 4px;
}
div.belt-pink {
  background-color : #ffeedd;
  padding : 0px 4px;
}
div.right-small {
  text-align : right;
  font-size : 8pt;
}
img.border {
  border-width : 1px;
  border-color : #000000;
  vertical-align : middle;
}
img.borderless {
  border-width : 0px;
  vertical-align : middle;
}
p.belt {
  background-color : #ffeedd;
  padding : 4px 8px;
}
p.belt-blue {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt {
  background-color : #ddeeff;
  padding : 4px 8px;
}
pre.belt-yellow {
  background-color : #ffffcc;
  padding : 4px 8px;
}
table {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
}
table.profile {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  font-family : serif;
  font-size : 10pt;
  margin-top : 8px;
  margin-left : 8px;
  margin-right : 8px;
  margin-bottom : 8px;
}
table.belt {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  background-color : #ffeedd;
  padding : 0px 0px;
  width : 100%;
}
table.content {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
}
table.font-fixed {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 2px 4px;
  font-family : monospace;
}
table.nest {
  border-style : solid;
  border-width : 0px;
  border-color : #000000;
  padding : 0px 0px;
}
td {
  padding : 0px 0px;
  vertical-align : middle;
}
td.center {
  text-align : center;
}
td.center-half {
  text-align : center;
  width : 50%;
  font-size : 8pt;
}
td.center-small {
  text-align : center;
  font-size : 8pt;
  padding : 0px 4px;
}
td.center-small-nopadding {
  text-align : center;
  font-size : 8pt;
  padding : 0px 0px;
}
td.center-white {
  text-align : center;
  background-color : #ffffff;
}
td.center-small-white {
  text-align : center;
  font-size : 8pt;
  background-color : #ffffff;
}
td.center-border1 {
  text-align : center;
  vertical-align : middle;
  empty-cells : show;
  border-style : solid;
  border-width : 1px;
  border-color : #ffc080;
  width : 22px;
  height : 22px;
}
td.left-small {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
}
td.left-small-white {
  text-align : left;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
td.right-small {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
}
td.right-small-white {
  text-align : right;
  font-size : 8pt;
  padding : 0px 4px;
  background-color : #ffffff;
}
th {
  padding : 0px 0px;
  vertical-align : middle;
}
#menu {
  margin: 0px 0px 0px 0px;
  padding: 0px;
  height: 32px;
}
#menu ul {
  margin: 0px;
  padding: 0px;
  list-style: none;
  text-align: center;
  clear: both;
}
#menu li {
  margin: 0px 5px 0px 0px;
  padding: 0px;
  float: left;
}
#menu a {
  display: block;
  padding: 2px 4px;
  text-decoration: none;
  margin: 0px;
  font-weight: bold;
  background: #FFFFFF;
  color: #333333;
  border: 1px solid #666666;
}
#menu a:hover {
  display: block;
  padding: 2px 4px;
  border-bottom: 1px solid #000000;
  text-decoration: none;
  background: #FFCC66;
}
#menu .current {
  background-color: #F45F57;
  font-weight: bold;
  color: #FFFFFF;
  border: 1px solid #333333;
}
-->
</style>
<!-- SyntaxHighlighter BEGIN -->
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shCore.css" rel="stylesheet" type="text/css">
<link href="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/styles/shThemeEclipse.css" rel="stylesheet" type="text/css">
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shCore.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushJava.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPlain.js" type="text/javascript"></script>
<script src="http://www.cc.kyoto-su.ac.jp/~atsushi/SyntaxHighlighter/scripts/shBrushPython.js" type="text/javascript"></script>
<script type="text/javascript"> 
<!--
SyntaxHighlighter.config.bloggerMode = true;
SyntaxHighlighter.config.clipboardSwf = 'http://alexgorbatchev.com/pub/sh/current/scripts/clipboard.swf';
SyntaxHighlighter.all();
SyntaxHighlighter.defaults['auto-links'] = false;
-->
</script>
<!-- SyntaxHighlighter END -->
<title>Version 8：照光（ライティング）を実装する</title>
</head>
<body>
<div id="menu">
<ul>
  <li><a href="../Lectures/index-j.html#TryJOGL">Javaプログラム集</a></li>
  <li><a href="index-j.html">TryJODL</a></li>
  <li><a href="version0.html">0</a></li>
  <li><a href="version1.html">1</a></li>
  <li><a href="version2.html">2</a></li>
  <li><a href="version3.html">3</a></li>
  <li><a href="version4.html">4</a></li>
  <li><a href="version5.html">5</a></li>
  <li><a href="version6.html">6</a></li>
  <li><a href="version7.html">7</a></li>
  <li><a href="version8.html" class="current">8</a></li>
  <li><a href="version9.html">9</a></li>
</ul>
</div>
<hr>
<h2>Version 8：照光（ライティング）を実装する</h2>
<p>ライティングのパラメータを設定するために「Version 7」を「Version 8」にしましょう。「tryjogl」ディレクトリ（パッケージ）にある「Example.java」の中身を、以下のソースコードと同じになるように直してください。編集するところをハイライトで表しておきます。</p>
<div class="belt">
<h3><a name="SourceCode">ソースコード</a>（Version 8）</h3>
</div>
<blockquote>
<!-- python -c 'print(",".join([str(x) for x in range(0, 0)]))' -->
<pre class="brush: java; toolbar: false; first-line: 1; highlight: [15, 143,144,145,146,147,148,149,150,151,152,153,154,155,156, 210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225];">
package tryjogl;

import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.util.gl2.GLUT;

import com.jogamp.opengl.awt.GLCanvas;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLProfile;

import javax.swing.JFrame;
import java.nio.FloatBuffer;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * JOGL（Java bindings for OpenGL）の例題プログラムである。
 * OpenGLを使ったJavaによる三次元グラフィックスの初歩的な練習になる。
 */
public class Example extends WindowAdapter implements GLEventListener
{
    /**
     * GLオブジェクトを記憶するフィールドである。
     */
    protected GL2 gl;

    /**
     * GLユーティリティを記憶するフィールドである。
     */
    protected GLU glu;

    /**
     * GLユーティリティツールキットを記憶するフィールドである。
     */
    protected GLUT glut;

    /**
     * ビューの幅を記憶するフィールドである。
     */
    protected int width;

    /**
     * ビューの高さを記憶するフィールドである。
     */
    protected int height;

    /**
     * Exampleのコンストラクタである。
     */
    public Example()
    {
        System.out.println("Example");

        // OpenGL描画のためのキャンバスを生成する。
        GLProfile profile = GLProfile.get(GLProfile.GL2);
        GLCapabilities capabilities = new GLCapabilities(profile);
        capabilities.setDoubleBuffered(true);
        GLCanvas aCanvas = new GLCanvas(capabilities);
        aCanvas.addGLEventListener(this);

        // フレームを生成し、上記のキャンバスを乗せて、ウィンドウとして開く。
        JFrame aFrame = new JFrame("Wire Teapot");
        aFrame.add(aCanvas);
        aFrame.addNotify();
        int titleBarHeight = aFrame.getInsets().top;
        aFrame.setSize(400, 400 + titleBarHeight);
        aFrame.setLocationRelativeTo(null);
        // aFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        aFrame.addWindowListener(this);
        aFrame.setFocusable(false);
        aFrame.setVisible(true);

        return;
    }

    /**
     * OpenGL起動時に初期化のために呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     */
    public void init(GLAutoDrawable aDrawable)
    {
        System.out.println("init");

        // グラフィックライブラリ（gl）を獲得し、
        // グラフィックライブラリユーティリティ（glu）と
        // グラフィックライブラリユーティリティツールキット（glut）を生成する。
        this.gl = aDrawable.getGL().getGL2();
        this.glu = new GLU();
        this.glut = new GLUT();

        // 材質の有効化
        // 陰線隠面処理の有効化
        // 片面表示機能の無効化
        // 法線ベクトルの有効化
        this.gl.glEnable(GL2.GL_COLOR_MATERIAL);
        this.gl.glEnable(GL2.GL_DEPTH_TEST);
        this.gl.glDisable(GL2.GL_CULL_FACE);
        this.gl.glEnable(GL2.GL_NORMALIZE);

        return;
    }

    /**
     * OpenGL描画を行う際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     */
    public void display(GLAutoDrawable aDrawable)
    {
        System.out.println("display");

        // 視界（視点・注視点・上方向ベクトル・視界角・近・遠）を整（設）える。
        double[] eyePoint = new double[] { 10.0d, 10.0d, 10.0d };
        double[] sightPoint = new double[] { 0.0d, 0.0d, 0.0d };
        double[] upVector = new double[] { 0.0d, 1.0d, 0.0d };
        double fovy = 15.0d;
        double near = 0.01d;
        double far = 100.0d;

        // キャンバス（ウィンドウ）の大きさからアスペクト比を求める。
        double aspect = (double)width / (double)height;

        // プロジェクション（遠近法）を設定する。
        this.gl.glMatrixMode(GL2.GL_PROJECTION);
        this.gl.glLoadIdentity();
        this.glu.gluPerspective(fovy, aspect, near, far);

        // 視界を設定する。
        this.gl.glMatrixMode(GL2.GL_MODELVIEW);
        this.gl.glLoadIdentity();
        this.glu.gluLookAt(
                           eyePoint[0], eyePoint[1], eyePoint[2],
                           sightPoint[0], sightPoint[1], sightPoint[2],
                           upVector[0], upVector[1], upVector[2]);

        // キャンバスをクリアする。
        this.gl.glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
        this.gl.glClear(GL2.GL_COLOR_BUFFER_BIT | GL2.GL_DEPTH_BUFFER_BIT);

        // 照明を設定する。
        this.gl.glEnable(GL2.GL_LIGHTING);
        this.gl.glLightModelfv(GL2.GL_LIGHT_MODEL_AMBIENT, this.asFloatBuffer(new float[] { 0.5f, 0.5f, 0.5f, 1.0f }));
        this.gl.glLightModelf(GL2.GL_LIGHT_MODEL_LOCAL_VIEWER, 0.0f);
        this.gl.glLightModelf(GL2.GL_LIGHT_MODEL_TWO_SIDE, 1.0f);
        this.gl.glEnable(GL2.GL_LIGHT0);
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_POSITION, this.asFloatBuffer(new float[] { 0.0f, 0.0f, 1.0f, 0.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_SPOT_DIRECTION, this.asFloatBuffer(new float[] { 0.0f, 0.0f, -1.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_SPOT_CUTOFF, this.asFloatBuffer(new float[] { 90.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_DIFFUSE, this.asFloatBuffer(new float[] { 0.5f, 0.5f, 0.5f, 1.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_SPECULAR, this.asFloatBuffer(new float[] { 0.5f, 0.5f, 0.5f, 1.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_LINEAR_ATTENUATION, this.asFloatBuffer(new float[] { 0.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_QUADRATIC_ATTENUATION, this.asFloatBuffer(new float[] { 0.0f }));
        this.gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_CONSTANT_ATTENUATION, this.asFloatBuffer(new float[] { 1.0f }));

        // ティーポットを描画する。
        this.gl.glColor3d(1.0d, 0.0d, 0.0d);
        this.glut.glutWireTeapot(1.5d);
        this.gl.glFlush();

        return;
    }

    /**
     * OpenGL表示モードや表示デバイスが変更された際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     * @param modeChanged 表示モードが変更されたか否か
     * @param deviceChanged 表示デバイスが変更されたか否か
     */
    public void displayChanged(GLAutoDrawable aDrawable, boolean modeChanged, boolean deviceChanged)
    {
        System.out.println("displayChanged");

        return;
    }

    /**
     * OpenGLの資源が破棄された際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     */
    public void dispose(GLAutoDrawable aDrawable)
    {
        System.out.println("dispose");

        return;
    }

    /**
     * OpenGL表示領域が変更された際に呼び出される。
     * @param aDrawable OpenGLの描画ダーゲット
     * @param x 表示領域のX座標
     * @param y 表示領域のY座標
     * @param w 表示領域の幅
     * @param h 表示領域の高さ
     */
    public void reshape(GLAutoDrawable aDrawable, int x, int y, int w, int h)
    {
        System.out.println("reshape");

        this.width = w;
        this.height = h;

        this.gl.glViewport(0, 0, width, height);

        return;
    }

    /**
     * float配列をfloatバッファに変換する。
     * @param array float配列
     * @return floatバッファ
     */
    private FloatBuffer asFloatBuffer(float[] array)
    {
        FloatBuffer buffer = FloatBuffer.allocate(array.length);
        for (int i = 0; i &lt; array.length; i++)
        {
            buffer.put(array[i]);
        }
        buffer.rewind();

        return buffer;
    }

    /**
     * ウィンドウを閉じようとした時に呼び出される。
     * @param aWindowEvent ウィンドウイベント
     */
    public void windowClosing(WindowEvent aWindowEvent)
    {
        // System.out.println(aWindowEvent.paramString());

        // 終了する。
        System.exit(0);

        return;
    }

    /**
     * 針金細工のティーポット（Wire Teapot）を描くOpenGLのウィンドウを開く。
     * @param arguments コマンドの引数列（文字列の配列）
     */
    public static void main(String[] arguments)
    {
        System.out.println("main");

        new Example();

        return;
    }
}
</pre>
</blockquote>
<div class="belt">
<h3><a name="Explanation">プログラムの解説</a></h3>
</div>
<p>まず、「<a href="http://docs.oracle.com/javase/jp/8/docs/api/java/nio/FloatBuffer.html">FloatBuffer</a>」をインポートします。ライティングのパラメータを設定する際、引数の数が不定個であるような引数の集まりを扱うためにJOGLでは、バッファと呼ばれるユーティリティを多用しているからです。それらを用いて、float配列をfloatバッファに変換するメソッド「asFloatBuffer(float[])」をprivateの可視属性にして新たに作成します。</p>
<p>次の行からがライティングのパラメータの設定になります。</p>
<p>最初に、ライティングを有効にするために「glEnable(GL2.<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/fixedfunc/GLLightingFunc.html#GL_LIGHTING">GL_LIGHTING</a>)」のメッセージを発信します。</p>

<p>続けて、「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/GL2ES1.html#glLightModelfv(int,%20float[],%20int)">glLightModelfv</a>(GL2.<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/GL2ES1.html#GL_LIGHT_MODEL_AMBIENT">GL_LIGHT_MODEL_AMBIENT</a>, FloatBuffer)」のメッセージで環境（アンビエント）光を設定します。ここでは環境光のRGBA強度を「0.5f, 0.5f, 0.5f, 1.0f」に指定しています。暗くもなく、明るくもありません。</p>

<p>そして、「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/GL2.html#GL_LIGHT_MODEL_LOCAL_VIEWER">GL_LIGHT_MODEL_LOCAL_VIEWER</a>」で鏡面反射角の計算方法を指定します。0.0fを指定すると、鏡面反射角は視線方向に平行かつZ軸のマイナス方向に向くことになります。</p>
<p>その次には、「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/GL2ES1.html#GL_LIGHT_MODEL_TWO_SIDE">GL_LIGHT_MODEL_TWO_SIDE</a>」でポリゴンに対するライティングの計算を片面または両面のどちらに対して行うかを指定します。0.0f以外を指定すると、両面のライティング計算が行われます。</p>
<p>OpenGLのライティングでは、環境光を除いたライト（照明となる光源）を8個（0番〜7番）持つことができます。ここでは、0番ライトを一つだけONにするために「glEnable(GL2.<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/fixedfunc/GLLightingFunc.html#GL_LIGHT0">GL_LIGHT0</a>)」のメッセージを発信し、それに続く8行の「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/fixedfunc/GLLightingFunc.html#glLightfv(int,%20int,%20java.nio.FloatBuffer)">glLightfv(GL2.GL_LIGHT0, FloatBuffer)</a>」が0番ライトの特性の設定になります。</p>
<ol>
  <li>「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/fixedfunc/GLLightingFunc.html#GL_POSITION">GL_POSITION</a>)」が照明位置</li>
  <li>「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/fixedfunc/GLLightingFunc.html#GL_SPOT_DIRECTION">GL_SPOT_DIRECTION</a>)」が照明方向</li>
  <li>「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/fixedfunc/GLLightingFunc.html#GL_SPOT_CUTOFF">GL_SPOT_CUTOFF</a>)」が最大放射角度</li>
  <li>「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/fixedfunc/GLLightingFunc.html#GL_DIFFUSE">GL_DIFFUSE</a>)」が拡散光：一方から来る光で、全ての方向に反射</li>
  <li>「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/fixedfunc/GLLightingFunc.html#GL_SPECULAR">GL_SPECULAR</a>)」が鏡面光：明るい、白いスポットを反射面に形づくるような光</li>
  <li>「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/fixedfunc/GLLightingFunc.html#GL_LINEAR_ATTENUATION">GL_LINEAR_ATTENUATION</a>)」が線形減衰率</li>
  <li>「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/fixedfunc/GLLightingFunc.html#GL_QUADRATIC_ATTENUATION">GL_QUADRATIC_ATTENUATION</a>)」が2次減衰率</li>
  <li>「<a href="https://jogamp.org/deployment/jogamp-current/javadoc/jogl/javadoc/com/jogamp/opengl/fixedfunc/GLLightingFunc.html#GL_CONSTANT_ATTENUATION">GL_CONSTANT_ATTENUATION</a>)」が一定減衰率</li>
</ol>
<div class="belt">
<h3><a name="BuildAndResult">ビルド＆実行結果</a>（Version 8）</h3>
</div>
<p>では、ビルドして実行してみましょう。赤いティーポットの針金細工に陰影（明暗）がついて描画されます。バージョン7の実行結果とバージョン8の実行結果を見比べてください。</p>
<blockquote>
<pre>
$ <span style="color:#ff0000">make test</span>
env LC_ALL=ja_JP.UTF-8 ant test
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
Buildfile: /Users/aoki/Desktop/Version8/build.xml

prepare:
     [exec] 2019年 12月20日 金曜日 13時52分06秒 JST

compile:
    [javac] Compiling 1 source file to /Users/aoki/Desktop/Version8/Classes
    [javac] Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
     [exec] 2019年 12月20日 金曜日 13時52分08秒 JST

jar:
      [jar] Building jar: /Users/aoki/Desktop/Version8/tryjogl.jar
      [jar] Building jar: /Users/aoki/Desktop/Version8/tryjogl-natives-macosx-universal.jar
     [exec] 2019年 12月20日 金曜日 13時52分09秒 JST

all:
     [exec] 2019年 12月20日 金曜日 13時52分09秒 JST

test:
     [exec] Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8
     [exec] main
     [exec] Example
     [exec] init
     [exec] reshape
     [exec] display
     [exec] display
     [exec] dispose
     [exec] 2019年 12月20日 金曜日 13時52分15秒 JST

BUILD SUCCESSFUL
Total time: 9 seconds
$ 
</pre>
</blockquote>
<blockquote><img src="images/version_8_1.jpg" width="402" height="424" alt="version_8_1"></blockquote>
<hr>
<p><a href="version7.html">←</a> <a href="version8.html">↑</a> <a href="version9.html">→</a></p>
<hr>
<div class="right-small">Updated: 2019/12/20 (Created: 2010/11/11) <a href="http://www.kyoto-su.ac.jp/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/KSU.jpg" width="115" height="30" alt="KSU"></a> <a href="http://www.cc.kyoto-su.ac.jp/~atsushi/"><img class="borderless" src="http://www.cc.kyoto-su.ac.jp/~atsushi/thumbnails/AokiHanko.jpg" width="32" height="32" alt="AokiHanko"></a></div>
</body>
</html>
